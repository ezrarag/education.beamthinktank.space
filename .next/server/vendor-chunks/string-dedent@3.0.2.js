"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/string-dedent@3.0.2";
exports.ids = ["vendor-chunks/string-dedent@3.0.2"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/string-dedent@3.0.2/node_modules/string-dedent/dist/dedent.mjs":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/string-dedent@3.0.2/node_modules/string-dedent/dist/dedent.mjs ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ dedent)\n/* harmony export */ });\nconst cache = new WeakMap();\nconst newline = /(\\n|\\r\\n?|\\u2028|\\u2029)/g;\nconst leadingWhitespace = /^\\s*/;\nconst nonWhitespace = /\\S/;\nconst slice = Array.prototype.slice;\nconst zero = '0'.charCodeAt(0);\nconst nine = '9'.charCodeAt(0);\nconst lowerA = 'a'.charCodeAt(0);\nconst lowerF = 'f'.charCodeAt(0);\nconst upperA = 'A'.charCodeAt(0);\nconst upperF = 'F'.charCodeAt(0);\nfunction dedent(arg) {\n    if (typeof arg === 'string') {\n        return process([arg])[0];\n    }\n    if (typeof arg === 'function') {\n        return function () {\n            const args = slice.call(arguments);\n            args[0] = processTemplateStringsArray(args[0]);\n            return arg.apply(this, args);\n        };\n    }\n    const strings = processTemplateStringsArray(arg);\n    // TODO: This is just `String.cooked`: https://tc39.es/proposal-string-cooked/\n    let s = getCooked(strings, 0);\n    for (let i = 1; i < strings.length; i++) {\n        s += arguments[i] + getCooked(strings, i);\n    }\n    return s;\n}\nfunction getCooked(strings, index) {\n    const str = strings[index];\n    if (str === undefined)\n        throw new TypeError(`invalid cooked string at index ${index}`);\n    return str;\n}\nfunction processTemplateStringsArray(strings) {\n    const cached = cache.get(strings);\n    if (cached)\n        return cached;\n    const raw = process(strings.raw);\n    const cooked = raw.map(cook);\n    Object.defineProperty(cooked, 'raw', {\n        value: Object.freeze(raw),\n    });\n    Object.freeze(cooked);\n    cache.set(strings, cooked);\n    return cooked;\n}\nfunction process(strings) {\n    // splitQuasis is an array of arrays. The inner array is contains text content lines on the\n    // even indices, and the newline char that ends the text content line on the odd indices.\n    // In the first array, the inner array's 0 index is the opening line of the template literal.\n    // In all other arrays, the inner array's 0 index is the continuation of the line directly after a\n    // template expression.\n    //\n    // Eg, in the following case:\n    //\n    // ```\n    // String.dedent`\n    //   first\n    //   ${expression} second\n    //   third\n    // `\n    // ```\n    //\n    // We expect the following splitQuasis:\n    //\n    // ```\n    // [\n    //   [\"\", \"\\n\", \"  first\", \"\\n\", \"  \"],\n    //   [\" second\", \"\\n\", \"  third\", \"\\n\", \"\"],\n    // ]\n    // ```\n    const splitQuasis = strings.map((quasi) => quasi.split(newline));\n    let common;\n    for (let i = 0; i < splitQuasis.length; i++) {\n        const lines = splitQuasis[i];\n        // The first split is the static text starting at the opening line until the first template\n        // expression (or the end of the template if there are no expressions).\n        const firstSplit = i === 0;\n        // The last split is all the static text after the final template expression until the closing\n        // line. If there are no template expressions, then the first split is also the last split.\n        const lastSplit = i + 1 === splitQuasis.length;\n        // The opening line must be empty (it very likely is) and it must not contain a template\n        // expression. The opening line's trailing newline char is removed.\n        if (firstSplit) {\n            // Length > 1 ensures there is a newline, and there is not a template expression.\n            if (lines.length === 1 || lines[0].length > 0) {\n                throw new Error('invalid content on opening line');\n            }\n            // Clear the captured newline char.\n            lines[1] = '';\n        }\n        // The closing line may only contain whitespace and must not contain a template expression. The\n        // closing line and its preceding newline are removed.\n        if (lastSplit) {\n            // Length > 1 ensures there is a newline, and there is not a template expression.\n            if (lines.length === 1 || nonWhitespace.test(lines[lines.length - 1])) {\n                throw new Error('invalid content on closing line');\n            }\n            // Clear the captured newline char, and the whitespace on the closing line.\n            lines[lines.length - 2] = '';\n            lines[lines.length - 1] = '';\n        }\n        // In the first spit, the index 0 is the opening line (which must be empty by now), and in all\n        // other splits, its the content trailing the template expression (and so can't be part of\n        // leading whitespace).\n        // Every odd index is the captured newline char, so we'll skip and only process evens.\n        for (let j = 2; j < lines.length; j += 2) {\n            const text = lines[j];\n            // If we are on the last line of this split, and we are not processing the last split (which\n            // is after all template expressions), then this line contains a template expression.\n            const lineContainsTemplateExpression = j + 1 === lines.length && !lastSplit;\n            // leadingWhitespace is guaranteed to match something, but it could be 0 chars.\n            const leading = leadingWhitespace.exec(text)[0];\n            // Empty lines do not affect the common indentation, and whitespace only lines are emptied\n            // (and also don't affect the comon indentation).\n            if (!lineContainsTemplateExpression && leading.length === text.length) {\n                lines[j] = '';\n                continue;\n            }\n            common = commonStart(leading, common);\n        }\n    }\n    const min = common ? common.length : 0;\n    return splitQuasis.map((lines) => {\n        let quasi = lines[0];\n        for (let i = 1; i < lines.length; i += 2) {\n            const newline = lines[i];\n            const text = lines[i + 1];\n            quasi += newline + text.slice(min);\n        }\n        return quasi;\n    });\n}\nfunction commonStart(a, b) {\n    if (b === undefined || a === b)\n        return a;\n    let i = 0;\n    for (const len = Math.min(a.length, b.length); i < len; i++) {\n        if (a[i] !== b[i])\n            break;\n    }\n    return a.slice(0, i);\n}\nfunction cook(raw) {\n    let out = '';\n    let start = 0;\n    // We need to find every backslash escape sequence, and cook the escape into a real char.\n    let i = 0;\n    while ((i = raw.indexOf('\\\\', i)) > -1) {\n        out += raw.slice(start, i);\n        // If the backslash is the last char of the string, then it was an invalid sequence.\n        // This can't actually happen in a tagged template literal, but could happen if you manually\n        // invoked the tag with an array.\n        if (++i === raw.length)\n            return undefined;\n        const next = raw[i++];\n        switch (next) {\n            // Escaped control codes need to be individually processed.\n            case 'b':\n                out += '\\b';\n                break;\n            case 't':\n                out += '\\t';\n                break;\n            case 'n':\n                out += '\\n';\n                break;\n            case 'v':\n                out += '\\v';\n                break;\n            case 'f':\n                out += '\\f';\n                break;\n            case 'r':\n                out += '\\r';\n                break;\n            // Escaped line terminators just skip the char.\n            case '\\r':\n                // Treat `\\r\\n` as a single terminator.\n                if (i < raw.length && raw[i] === '\\n')\n                    ++i;\n            // fall through\n            case '\\n':\n            case '\\u2028':\n            case '\\u2029':\n                break;\n            // `\\0` is a null control char, but `\\0` followed by another digit is an illegal octal escape.\n            case '0':\n                if (isDigit(raw, i))\n                    return undefined;\n                out += '\\0';\n                break;\n            // Hex escapes must contain 2 hex chars.\n            case 'x': {\n                const n = parseHex(raw, i, i + 2);\n                if (n === -1)\n                    return undefined;\n                i += 2;\n                out += String.fromCharCode(n);\n                break;\n            }\n            // Unicode escapes contain either 4 chars, or an unlimited number between `{` and `}`.\n            // The hex value must not overflow 0x10ffff.\n            case 'u': {\n                let n;\n                if (i < raw.length && raw[i] === '{') {\n                    const end = raw.indexOf('}', ++i);\n                    if (end === -1)\n                        return undefined;\n                    n = parseHex(raw, i, end);\n                    i = end + 1;\n                }\n                else {\n                    n = parseHex(raw, i, i + 4);\n                    i += 4;\n                }\n                if (n === -1 || n > 0x10ffff)\n                    return undefined;\n                out += String.fromCodePoint(n);\n                break;\n            }\n            default:\n                if (isDigit(next, 0))\n                    return undefined;\n                out += next;\n        }\n        start = i;\n    }\n    return out + raw.slice(start);\n}\nfunction isDigit(str, index) {\n    const c = str.charCodeAt(index);\n    return c >= zero && c <= nine;\n}\nfunction parseHex(str, index, end) {\n    if (end >= str.length)\n        return -1;\n    let n = 0;\n    for (; index < end; index++) {\n        const c = hexToInt(str.charCodeAt(index));\n        if (c === -1)\n            return -1;\n        n = n * 16 + c;\n    }\n    return n;\n}\nfunction hexToInt(c) {\n    if (c >= zero && c <= nine)\n        return c - zero;\n    if (c >= lowerA && c <= lowerF)\n        return c - lowerA + 10;\n    if (c >= upperA && c <= upperF)\n        return c - upperA + 10;\n    return -1;\n}\n\n\n//# sourceMappingURL=dedent.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/string-dedent@3.0.2/node_modules/string-dedent/dist/dedent.mjs\n");

/***/ })

};
;