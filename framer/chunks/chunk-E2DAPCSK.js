// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 4b106605c55c3c39 "Housemood (copy)", do not edit manually */
// /:https://framerusercontent.com/modules/73WDPR4Shb2PUaudKfK7/QP5B5xqtVG4hCBfPioWq/Counter1_1.js
import { jsx as _jsx } from "react/jsx-runtime";
import { useState, useEffect, useRef } from "react";
import { motion } from "unframer";
import { addPropertyControls, ControlType } from "unframer";
var CounterStyles = { container: { display: "flex", justifyContent: "center", alignItems: "center" } };
function Counter(props) {
  const { start, end, speed, gapSize, loop, startOnViewport, restartOnViewport, textSize, selectedFont, textColor, letterSpacing } = props;
  const [count, setCount] = useState(start);
  const [isVisible, setIsVisible] = useState(false);
  const containerRef = useRef(null);
  useEffect(() => {
    const observer = new IntersectionObserver((entries) => {
      const entry = entries[0];
      setIsVisible(entry.isIntersecting);
    });
    if (containerRef.current) {
      observer.observe(containerRef.current);
    }
    return () => {
      if (containerRef.current) {
        observer.unobserve(containerRef.current);
      }
    };
  }, []);
  useEffect(() => {
    const updateCount = () => {
      setCount((prevCount) => {
        return prevCount >= end ? end : prevCount + 1;
      });
    };
    if (isVisible || !startOnViewport && start !== end) {
      const intervalId = setInterval(updateCount, speed);
      return () => {
        clearInterval(intervalId);
      };
    } else if (startOnViewport && isVisible) {
      setCount(start);
    }
  }, [count, start, end, loop, isVisible, speed, startOnViewport]);
  useEffect(() => {
    if (restartOnViewport && isVisible) {
      setCount(start);
    }
  }, [isVisible, restartOnViewport, start]);
  return /* @__PURE__ */ _jsx(motion.div, { ref: containerRef, style: { ...CounterStyles.container, gap: `${gapSize}px`, flexDirection: "row", alignItems: "center", fontSize: `${textSize}px`, fontFamily: selectedFont.fontFamily, fontWeight: selectedFont.fontWeight, color: textColor }, children: /* @__PURE__ */ _jsx("span", { style: { letterSpacing: `${letterSpacing}em` }, children: count }) });
}
Counter.defaultProps = { start: 0, end: 100, speed: 100, loop: false, textSize: 36, selectedFont: { fontFamily: "Inter", fontWeight: 500, systemFont: true }, textColor: "#D3D3D3", startOnViewport: false, letterSpacing: 0 };
addPropertyControls(Counter, { startOnViewport: { type: ControlType.Boolean, title: "Viewport", defaultValue: false, enabledTitle: "On", disabledTitle: "Off" }, restartOnViewport: { type: ControlType.Boolean, title: "Replay", defaultValue: false, enabledTitle: "Yes", disabledTitle: "No" }, selectedFont: { title: "Font", type: ControlType.Font, defaultValue: { fontFamily: "Inter", fontWeight: 500, systemFont: true } }, textSize: { title: "Font Size", type: ControlType.Number, min: 8, max: 240, step: 1 }, letterSpacing: { type: ControlType.Number, title: "Kerning (em)", defaultValue: 0, min: -0.5, max: 0.5, step: 0.01 }, textColor: { type: ControlType.Color, title: "Font Color" }, start: { type: ControlType.Number, title: "Start Number", defaultValue: 0, displayStepper: true }, end: { type: ControlType.Number, title: "End Number", defaultValue: 10, displayStepper: true }, gapSize: { type: ControlType.Number, title: "Gap Size", defaultValue: 4, min: 0, max: 100, step: 4 }, speed: { type: ControlType.Number, title: "Speed (ms)", defaultValue: 100, min: 0, max: 2e3, step: 10 }, loop: { type: ControlType.Boolean, title: "Loop Animation", defaultValue: false, enabledTitle: "On", disabledTitle: "Off" } });

export {
  Counter
};
