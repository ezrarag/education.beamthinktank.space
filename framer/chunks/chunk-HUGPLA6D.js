// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 4b106605c55c3c39 "Housemood (copy)", do not edit manually */
// /:https://framerusercontent.com/modules/QhJKpqGqPxDmVMgIRLLU/G6g93OStw38s1pMQLa8V/gFwBjMfM0.js
import { addPropertyControls as e3, ControlType as t10, QueryEngine as l2 } from "unframer";

// /:https://framerusercontent.com/modules/QhJKpqGqPxDmVMgIRLLU/G6g93OStw38s1pMQLa8V/gFwBjMfM0-0.js
import { ControlType as U } from "unframer";
import { ControlType as tA } from "unframer";
var t;
var e;
var r;
var n = Object.create;
var i = Object.defineProperty;
var s = Object.getOwnPropertyDescriptor;
var a = Object.getOwnPropertyNames;
var o = Object.getPrototypeOf;
var l = Object.prototype.hasOwnProperty;
var u = (t102, e22) => function() {
  return e22 || (0, t102[a(t102)[0]])((e22 = { exports: {} }).exports, e22), e22.exports;
};
var f = (t102, e22, r2, n22) => {
  if (e22 && "object" == typeof e22 || "function" == typeof e22) for (let o22 of a(e22)) l.call(t102, o22) || o22 === r2 || i(t102, o22, { get: () => e22[o22], enumerable: !(n22 = s(e22, o22)) || n22.enumerable });
  return t102;
};
var h = (t102, e22, r2) => (r2 = null != t102 ? n(o(t102)) : {}, f(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  !e22 && t102 && t102.__esModule ? r2 : i(r2, "default", { value: t102, enumerable: true }),
  t102
));
var c = u({ "../../../node_modules/dataloader/index.js"(t102, e22) {
  var r2, n22 = /* @__PURE__ */ (function() {
    function t11(t12, e4) {
      if ("function" != typeof t12) throw TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but got: " + t12 + ".");
      this._batchLoadFn = t12, this._maxBatchSize = (function(t13) {
        if (!(!t13 || false !== t13.batch)) return 1;
        var e5 = t13 && t13.maxBatchSize;
        if (void 0 === e5) return 1 / 0;
        if ("number" != typeof e5 || e5 < 1) throw TypeError("maxBatchSize must be a positive number: " + e5);
        return e5;
      })(e4), this._batchScheduleFn = (function(t13) {
        var e5 = t13 && t13.batchScheduleFn;
        if (void 0 === e5) return i2;
        if ("function" != typeof e5) throw TypeError("batchScheduleFn must be a function: " + e5);
        return e5;
      })(e4), this._cacheKeyFn = (function(t13) {
        var e5 = t13 && t13.cacheKeyFn;
        if (void 0 === e5) return function(t14) {
          return t14;
        };
        if ("function" != typeof e5) throw TypeError("cacheKeyFn must be a function: " + e5);
        return e5;
      })(e4), this._cacheMap = (function(t13) {
        if (!(!t13 || false !== t13.cache)) return null;
        var e5 = t13 && t13.cacheMap;
        if (void 0 === e5) return /* @__PURE__ */ new Map();
        if (null !== e5) {
          var r3 = ["get", "set", "delete", "clear"].filter(function(t14) {
            return e5 && "function" != typeof e5[t14];
          });
          if (0 !== r3.length) throw TypeError("Custom cacheMap missing methods: " + r3.join(", "));
        }
        return e5;
      })(e4), this._batch = null, this.name = e4 && e4.name ? e4.name : null;
    }
    var e32 = t11.prototype;
    return e32.load = function(t12) {
      if (null == t12) throw TypeError("The loader.load() function must be called with a value, but got: " + String(t12) + ".");
      var e4 = (function(t13) {
        var e5 = t13._batch;
        if (null !== e5 && !e5.hasDispatched && e5.keys.length < t13._maxBatchSize) return e5;
        var r4 = { hasDispatched: false, keys: [], callbacks: [] };
        return t13._batch = r4, t13._batchScheduleFn(function() {
          (function(t14, e6) {
            var r5;
            if (e6.hasDispatched = true, 0 === e6.keys.length) {
              a22(e6);
              return;
            }
            try {
              r5 = t14._batchLoadFn(e6.keys);
            } catch (r6) {
              return s2(t14, e6, TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function errored synchronously: " + String(r6) + "."));
            }
            if (!r5 || "function" != typeof r5.then) return s2(t14, e6, TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did not return a Promise: " + String(r5) + "."));
            r5.then(function(t15) {
              if (!o22(t15)) throw TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did not return a Promise of an Array: " + String(t15) + ".");
              if (t15.length !== e6.keys.length) throw TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did not return a Promise of an Array of the same length as the Array of keys.\n\nKeys:\n" + String(e6.keys) + "\n\nValues:\n" + String(t15));
              a22(e6);
              for (var r6 = 0; r6 < e6.callbacks.length; r6++) {
                var n4 = t15[r6];
                n4 instanceof Error ? e6.callbacks[r6].reject(n4) : e6.callbacks[r6].resolve(n4);
              }
            }).catch(function(r6) {
              s2(t14, e6, r6);
            });
          })(t13, r4);
        }), r4;
      })(this), r3 = this._cacheMap, n3 = this._cacheKeyFn(t12);
      if (r3) {
        var i3 = r3.get(n3);
        if (i3) {
          var l22 = e4.cacheHits || (e4.cacheHits = []);
          return new Promise(function(t13) {
            l22.push(function() {
              t13(i3);
            });
          });
        }
      }
      e4.keys.push(t12);
      var u2 = new Promise(function(t13, r4) {
        e4.callbacks.push({ resolve: t13, reject: r4 });
      });
      return r3 && r3.set(n3, u2), u2;
    }, e32.loadMany = function(t12) {
      if (!o22(t12)) throw TypeError("The loader.loadMany() function must be called with Array<key> but got: " + t12 + ".");
      for (var e4 = [], r3 = 0; r3 < t12.length; r3++) e4.push(this.load(t12[r3]).catch(function(t13) {
        return t13;
      }));
      return Promise.all(e4);
    }, e32.clear = function(t12) {
      var e4 = this._cacheMap;
      if (e4) {
        var r3 = this._cacheKeyFn(t12);
        e4.delete(r3);
      }
      return this;
    }, e32.clearAll = function() {
      var t12 = this._cacheMap;
      return t12 && t12.clear(), this;
    }, e32.prime = function(t12, e4) {
      var r3 = this._cacheMap;
      if (r3) {
        var n3, i3 = this._cacheKeyFn(t12);
        void 0 === r3.get(i3) && (e4 instanceof Error ? (n3 = Promise.reject(e4)).catch(function() {
        }) : n3 = Promise.resolve(e4), r3.set(i3, n3));
      }
      return this;
    }, t11;
  })(), i2 = "object" == typeof process && "function" == typeof process.nextTick ? function(t11) {
    r2 || (r2 = Promise.resolve()), r2.then(function() {
      process.nextTick(t11);
    });
  } : "function" == typeof setImmediate ? function(t11) {
    setImmediate(t11);
  } : function(t11) {
    setTimeout(t11);
  };
  function s2(t11, e32, r3) {
    a22(e32);
    for (var n3 = 0; n3 < e32.keys.length; n3++) t11.clear(e32.keys[n3]), e32.callbacks[n3].reject(r3);
  }
  function a22(t11) {
    if (t11.cacheHits) for (var e32 = 0; e32 < t11.cacheHits.length; e32++) t11.cacheHits[e32]();
  }
  function o22(t11) {
    return "object" == typeof t11 && null !== t11 && "number" == typeof t11.length && (0 === t11.length || t11.length > 0 && Object.prototype.hasOwnProperty.call(t11, t11.length - 1));
  }
  e22.exports = n22;
} });
var p = u({ "../../../node_modules/splaytree/dist/splay.js"(t102, e22) {
  var r2;
  r2 = function() {
    var t11 = function(t12, e4) {
      this.next = null, this.key = t12, this.data = e4, this.left = null, this.right = null;
    };
    function e32(t12, e4) {
      return t12 > e4 ? 1 : t12 < e4 ? -1 : 0;
    }
    function r3(e4, r4, n3) {
      for (var i3 = new t11(null, null), s2 = i3, a22 = i3; ; ) {
        var o22 = n3(e4, r4.key);
        if (o22 < 0) {
          if (null === r4.left) break;
          if (0 > n3(e4, r4.left.key)) {
            var l22 = r4.left;
            if (r4.left = l22.right, l22.right = r4, null === (r4 = l22).left) break;
          }
          a22.left = r4, a22 = r4, r4 = r4.left;
        } else if (o22 > 0) {
          if (null === r4.right) break;
          if (n3(e4, r4.right.key) > 0) {
            var l22 = r4.right;
            if (r4.right = l22.left, l22.left = r4, null === (r4 = l22).right) break;
          }
          s2.right = r4, s2 = r4, r4 = r4.right;
        } else break;
      }
      return s2.right = r4.left, a22.left = r4.right, r4.left = i3.right, r4.right = i3.left, r4;
    }
    function n22(e4, n3, i3, s2) {
      var a22 = new t11(e4, n3);
      if (null === i3) return a22.left = a22.right = null, a22;
      i3 = r3(e4, i3, s2);
      var o22 = s2(e4, i3.key);
      return o22 < 0 ? (a22.left = i3.left, a22.right = i3, i3.left = null) : o22 >= 0 && (a22.right = i3.right, a22.left = i3, i3.right = null), a22;
    }
    function i2(t12, e4, n3) {
      var i3 = null, s2 = null;
      if (e4) {
        e4 = r3(t12, e4, n3);
        var a22 = n3(e4.key, t12);
        0 === a22 ? (i3 = e4.left, s2 = e4.right) : a22 < 0 ? (s2 = e4.right, e4.right = null, i3 = e4) : (i3 = e4.left, e4.left = null, s2 = e4);
      }
      return { left: i3, right: s2 };
    }
    return (
      /** @class */
      (function() {
        function s2(t12) {
          void 0 === t12 && (t12 = e32), this._root = null, this._size = 0, this._comparator = t12;
        }
        return s2.prototype.insert = function(t12, e4) {
          return this._size++, this._root = n22(t12, e4, this._root, this._comparator);
        }, s2.prototype.add = function(e4, n3) {
          var i3 = new t11(e4, n3);
          null === this._root && (i3.left = i3.right = null, this._size++, this._root = i3);
          var s3 = this._comparator, a22 = r3(e4, this._root, s3), o22 = s3(e4, a22.key);
          return 0 === o22 ? this._root = a22 : (o22 < 0 ? (i3.left = a22.left, i3.right = a22, a22.left = null) : o22 > 0 && (i3.right = a22.right, i3.left = a22, a22.right = null), this._size++, this._root = i3), this._root;
        }, s2.prototype.remove = function(t12) {
          this._root = this._remove(t12, this._root, this._comparator);
        }, s2.prototype._remove = function(t12, e4, n3) {
          var i3;
          return null === e4 ? null : (e4 = r3(t12, e4, n3), 0 === n3(t12, e4.key)) ? (null === e4.left ? i3 = e4.right : (i3 = r3(t12, e4.left, n3)).right = e4.right, this._size--, i3) : e4;
        }, s2.prototype.pop = function() {
          var t12 = this._root;
          if (t12) {
            for (; t12.left; ) t12 = t12.left;
            return this._root = r3(t12.key, this._root, this._comparator), this._root = this._remove(t12.key, this._root, this._comparator), { key: t12.key, data: t12.data };
          }
          return null;
        }, s2.prototype.findStatic = function(t12) {
          for (var e4 = this._root, r4 = this._comparator; e4; ) {
            var n3 = r4(t12, e4.key);
            if (0 === n3) return e4;
            e4 = n3 < 0 ? e4.left : e4.right;
          }
          return null;
        }, s2.prototype.find = function(t12) {
          return this._root && (this._root = r3(t12, this._root, this._comparator), 0 !== this._comparator(t12, this._root.key)) ? null : this._root;
        }, s2.prototype.contains = function(t12) {
          for (var e4 = this._root, r4 = this._comparator; e4; ) {
            var n3 = r4(t12, e4.key);
            if (0 === n3) return true;
            e4 = n3 < 0 ? e4.left : e4.right;
          }
          return false;
        }, s2.prototype.forEach = function(t12, e4) {
          for (var r4 = this._root, n3 = [], i3 = false; !i3; ) null !== r4 ? (n3.push(r4), r4 = r4.left) : 0 !== n3.length ? (r4 = n3.pop(), t12.call(e4, r4), r4 = r4.right) : i3 = true;
          return this;
        }, s2.prototype.range = function(t12, e4, r4, n3) {
          for (var i3 = [], s3 = this._comparator, a22 = this._root; 0 !== i3.length || a22; ) if (a22) i3.push(a22), a22 = a22.left;
          else {
            if (s3((a22 = i3.pop()).key, e4) > 0) break;
            if (s3(a22.key, t12) >= 0 && r4.call(n3, a22)) return this;
            a22 = a22.right;
          }
          return this;
        }, s2.prototype.keys = function() {
          var t12 = [];
          return this.forEach(function(e4) {
            var r4 = e4.key;
            return t12.push(r4);
          }), t12;
        }, s2.prototype.values = function() {
          var t12 = [];
          return this.forEach(function(e4) {
            var r4 = e4.data;
            return t12.push(r4);
          }), t12;
        }, s2.prototype.min = function() {
          return this._root ? this.minNode(this._root).key : null;
        }, s2.prototype.max = function() {
          return this._root ? this.maxNode(this._root).key : null;
        }, s2.prototype.minNode = function(t12) {
          if (void 0 === t12 && (t12 = this._root), t12) for (; t12.left; ) t12 = t12.left;
          return t12;
        }, s2.prototype.maxNode = function(t12) {
          if (void 0 === t12 && (t12 = this._root), t12) for (; t12.right; ) t12 = t12.right;
          return t12;
        }, s2.prototype.at = function(t12) {
          for (var e4 = this._root, r4 = false, n3 = 0, i3 = []; !r4; ) if (e4) i3.push(e4), e4 = e4.left;
          else if (i3.length > 0) {
            if (e4 = i3.pop(), n3 === t12) return e4;
            n3++, e4 = e4.right;
          } else r4 = true;
          return null;
        }, s2.prototype.next = function(t12) {
          var e4 = this._root, r4 = null;
          if (t12.right) {
            for (r4 = t12.right; r4.left; ) r4 = r4.left;
            return r4;
          }
          for (var n3 = this._comparator; e4; ) {
            var i3 = n3(t12.key, e4.key);
            if (0 === i3) break;
            i3 < 0 ? (r4 = e4, e4 = e4.left) : e4 = e4.right;
          }
          return r4;
        }, s2.prototype.prev = function(t12) {
          var e4 = this._root, r4 = null;
          if (null !== t12.left) {
            for (r4 = t12.left; r4.right; ) r4 = r4.right;
            return r4;
          }
          for (var n3 = this._comparator; e4; ) {
            var i3 = n3(t12.key, e4.key);
            if (0 === i3) break;
            i3 < 0 ? e4 = e4.left : (r4 = e4, e4 = e4.right);
          }
          return r4;
        }, s2.prototype.clear = function() {
          return this._root = null, this._size = 0, this;
        }, s2.prototype.toList = function() {
          return (function(e4) {
            for (var r4 = e4, n3 = [], i3 = false, s3 = new t11(null, null), a22 = s3; !i3; ) r4 ? (n3.push(r4), r4 = r4.left) : n3.length > 0 ? r4 = (r4 = a22 = a22.next = n3.pop()).right : i3 = true;
            return a22.next = null, s3.next;
          })(this._root);
        }, s2.prototype.load = function(e4, r4, n3) {
          void 0 === r4 && (r4 = []), void 0 === n3 && (n3 = false);
          var i3 = e4.length, s3 = this._comparator;
          if (n3 && (function t12(e5, r5, n4, i4, s4) {
            if (!(n4 >= i4)) {
              for (var a3 = e5[n4 + i4 >> 1], o22 = n4 - 1, l22 = i4 + 1; ; ) {
                do
                  o22++;
                while (0 > s4(e5[o22], a3));
                do
                  l22--;
                while (s4(e5[l22], a3) > 0);
                if (o22 >= l22) break;
                var u2 = e5[o22];
                e5[o22] = e5[l22], e5[l22] = u2, u2 = r5[o22], r5[o22] = r5[l22], r5[l22] = u2;
              }
              t12(e5, r5, n4, l22, s4), t12(e5, r5, l22 + 1, i4, s4);
            }
          })(e4, r4, 0, i3 - 1, s3), null === this._root) this._root = (function e5(r5, n4, i4, s4) {
            var a3 = s4 - i4;
            if (a3 > 0) {
              var o22 = i4 + Math.floor(a3 / 2), l22 = r5[o22], u2 = n4[o22], f2 = new t11(l22, u2);
              return f2.left = e5(r5, n4, i4, o22), f2.right = e5(r5, n4, o22 + 1, s4), f2;
            }
            return null;
          })(e4, r4, 0, i3), this._size = i3;
          else {
            var a22 = (function(e5, r5, n4) {
              for (var i4 = new t11(null, null), s4 = i4, a3 = e5, o22 = r5; null !== a3 && null !== o22; ) 0 > n4(a3.key, o22.key) ? (s4.next = a3, a3 = a3.next) : (s4.next = o22, o22 = o22.next), s4 = s4.next;
              return null !== a3 ? s4.next = a3 : null !== o22 && (s4.next = o22), i4.next;
            })(this.toList(), (function(e5, r5) {
              for (var n4 = new t11(null, null), i4 = n4, s4 = 0; s4 < e5.length; s4++) i4 = i4.next = new t11(e5[s4], r5[s4]);
              return i4.next = null, n4.next;
            })(e4, r4), s3);
            i3 = this._size + i3, this._root = (function t12(e5, r5, n4) {
              var i4 = n4 - r5;
              if (i4 > 0) {
                var s4 = r5 + Math.floor(i4 / 2), a3 = t12(e5, r5, s4), o22 = e5.head;
                return o22.left = a3, e5.head = e5.head.next, o22.right = t12(e5, s4 + 1, n4), o22;
              }
              return null;
            })({ head: a22 }, 0, i3);
          }
          return this;
        }, s2.prototype.isEmpty = function() {
          return null === this._root;
        }, Object.defineProperty(s2.prototype, "size", { get: function() {
          return this._size;
        }, enumerable: true, configurable: true }), Object.defineProperty(s2.prototype, "root", { get: function() {
          return this._root;
        }, enumerable: true, configurable: true }), s2.prototype.toString = function(t12) {
          void 0 === t12 && (t12 = function(t13) {
            return String(t13.key);
          });
          var e4 = [];
          return (function t13(e5, r4, n3, i3, s3) {
            if (e5) {
              i3("" + r4 + (n3 ? "\u2514\u2500\u2500 " : "\u251C\u2500\u2500 ") + s3(e5) + "\n");
              var a22 = r4 + (n3 ? "    " : "\u2502   ");
              e5.left && t13(e5.left, a22, false, i3, s3), e5.right && t13(e5.right, a22, true, i3, s3);
            }
          })(this._root, "", true, function(t13) {
            return e4.push(t13);
          }, t12), e4.join("");
        }, s2.prototype.update = function(t12, e4, s3) {
          var a22, o22, l22 = this._comparator, u2 = i2(t12, this._root, l22), f2 = u2.left, h2 = u2.right;
          0 > l22(t12, e4) ? h2 = n22(e4, s3, h2, l22) : f2 = n22(e4, s3, f2, l22), this._root = (a22 = f2, null === (o22 = h2) ? a22 : (null === a22 || ((o22 = r3(a22.key, o22, l22)).left = a22), o22));
        }, s2.prototype.split = function(t12) {
          return i2(t12, this._root, this._comparator);
        }, s2.prototype[Symbol.iterator] = function() {
          var t12, e4, r4;
          return (function(t13, e5) {
            var r5, n3, i3, s3, a22 = { label: 0, sent: function() {
              if (1 & i3[0]) throw i3[1];
              return i3[1];
            }, trys: [], ops: [] };
            return s3 = { next: o22(0), throw: o22(1), return: o22(2) }, "function" == typeof Symbol && (s3[Symbol.iterator] = function() {
              return this;
            }), s3;
            function o22(s4) {
              return function(o3) {
                return (function(s5) {
                  if (r5) throw TypeError("Generator is already executing.");
                  for (; a22; ) try {
                    if (r5 = 1, n3 && (i3 = 2 & s5[0] ? n3.return : s5[0] ? n3.throw || ((i3 = n3.return) && i3.call(n3), 0) : n3.next) && !(i3 = i3.call(n3, s5[1])).done) return i3;
                    switch (n3 = 0, i3 && (s5 = [2 & s5[0], i3.value]), s5[0]) {
                      case 0:
                      case 1:
                        i3 = s5;
                        break;
                      case 4:
                        return a22.label++, { value: s5[1], done: false };
                      case 5:
                        a22.label++, n3 = s5[1], s5 = [0];
                        continue;
                      case 7:
                        s5 = a22.ops.pop(), a22.trys.pop();
                        continue;
                      default:
                        if (!(i3 = (i3 = a22.trys).length > 0 && i3[i3.length - 1]) && (6 === s5[0] || 2 === s5[0])) {
                          a22 = 0;
                          continue;
                        }
                        if (3 === s5[0] && (!i3 || s5[1] > i3[0] && s5[1] < i3[3])) {
                          a22.label = s5[1];
                          break;
                        }
                        if (6 === s5[0] && a22.label < i3[1]) {
                          a22.label = i3[1], i3 = s5;
                          break;
                        }
                        if (i3 && a22.label < i3[2]) {
                          a22.label = i3[2], a22.ops.push(s5);
                          break;
                        }
                        i3[2] && a22.ops.pop(), a22.trys.pop();
                        continue;
                    }
                    s5 = e5.call(t13, a22);
                  } catch (t14) {
                    s5 = [6, t14], n3 = 0;
                  } finally {
                    r5 = i3 = 0;
                  }
                  if (5 & s5[0]) throw s5[1];
                  return { value: s5[0] ? s5[1] : void 0, done: true };
                })([s4, o3]);
              };
            }
          })(this, function(n3) {
            switch (n3.label) {
              case 0:
                t12 = this._root, e4 = [], r4 = false, n3.label = 1;
              case 1:
                if (r4) return [3, 6];
                if (!(null !== t12)) return [3, 2];
                return e4.push(t12), t12 = t12.left, [3, 5];
              case 2:
                if (!(0 !== e4.length)) return [3, 4];
                return [4, t12 = e4.pop()];
              case 3:
                return n3.sent(), t12 = t12.right, [3, 5];
              case 4:
                r4 = true, n3.label = 5;
              case 5:
                return [3, 1];
              case 6:
                return [2];
            }
          });
        }, s2;
      })()
    );
  }, "object" == typeof t102 && void 0 !== e22 ? e22.exports = r2() : "function" == typeof define && define.amd ? define(r2) : t102.SplayTree = r2();
} });
var d = u({ "../../../node_modules/whatwg-mimetype/lib/utils.js"(t102) {
  t102.removeLeadingAndTrailingHTTPWhitespace = (t11) => t11.replace(/^[ \t\n\r]+/u, "").replace(/[ \t\n\r]+$/u, ""), t102.removeTrailingHTTPWhitespace = (t11) => t11.replace(/[ \t\n\r]+$/u, ""), t102.isHTTPWhitespaceChar = (t11) => " " === t11 || "	" === t11 || "\n" === t11 || "\r" === t11, t102.solelyContainsHTTPTokenCodePoints = (t11) => /^[-!#$%&'*+.^_`|~A-Za-z0-9]*$/u.test(t11), t102.soleyContainsHTTPQuotedStringTokenCodePoints = (t11) => /^[\t\u0020-\u007E\u0080-\u00FF]*$/u.test(t11), t102.asciiLowercase = (t11) => t11.replace(/[A-Z]/ug, (t12) => t12.toLowerCase()), t102.collectAnHTTPQuotedString = (t11, e22) => {
    let r2 = "";
    for (e22++; ; ) {
      for (; e22 < t11.length && '"' !== t11[e22] && "\\" !== t11[e22]; ) r2 += t11[e22], ++e22;
      if (e22 >= t11.length) break;
      let n22 = t11[e22];
      if (++e22, "\\" === n22) {
        if (e22 >= t11.length) {
          r2 += "\\";
          break;
        }
        r2 += t11[e22], ++e22;
      } else break;
    }
    return [r2, e22];
  };
} });
var g = u({ "../../../node_modules/whatwg-mimetype/lib/mime-type-parameters.js"(t102, e22) {
  var { asciiLowercase: r2, solelyContainsHTTPTokenCodePoints: n22, soleyContainsHTTPQuotedStringTokenCodePoints: i2 } = d();
  e22.exports = class {
    get size() {
      return this._map.size;
    }
    get(t11) {
      return t11 = r2(String(t11)), this._map.get(t11);
    }
    has(t11) {
      return t11 = r2(String(t11)), this._map.has(t11);
    }
    set(t11, e32) {
      if (t11 = r2(String(t11)), e32 = String(e32), !n22(t11)) throw Error(`Invalid MIME type parameter name "${t11}": only HTTP token code points are valid.`);
      if (!i2(e32)) throw Error(`Invalid MIME type parameter value "${e32}": only HTTP quoted-string token code points are valid.`);
      return this._map.set(t11, e32);
    }
    clear() {
      this._map.clear();
    }
    delete(t11) {
      return t11 = r2(String(t11)), this._map.delete(t11);
    }
    forEach(t11, e32) {
      this._map.forEach(t11, e32);
    }
    keys() {
      return this._map.keys();
    }
    values() {
      return this._map.values();
    }
    entries() {
      return this._map.entries();
    }
    [Symbol.iterator]() {
      return this._map[Symbol.iterator]();
    }
    constructor(t11) {
      this._map = t11;
    }
  };
} });
var v = u({ "../../../node_modules/whatwg-mimetype/lib/parser.js"(t102, e22) {
  var { removeLeadingAndTrailingHTTPWhitespace: r2, removeTrailingHTTPWhitespace: n22, isHTTPWhitespaceChar: i2, solelyContainsHTTPTokenCodePoints: s2, soleyContainsHTTPQuotedStringTokenCodePoints: a22, asciiLowercase: o22, collectAnHTTPQuotedString: l22 } = d();
  e22.exports = (t11) => {
    t11 = r2(t11);
    let e32 = 0, u2 = "";
    for (; e32 < t11.length && "/" !== t11[e32]; ) u2 += t11[e32], ++e32;
    if (0 === u2.length || !s2(u2) || e32 >= t11.length) return null;
    ++e32;
    let f2 = "";
    for (; e32 < t11.length && ";" !== t11[e32]; ) f2 += t11[e32], ++e32;
    if (0 === (f2 = n22(f2)).length || !s2(f2)) return null;
    let h2 = { type: o22(u2), subtype: o22(f2), parameters: /* @__PURE__ */ new Map() };
    for (; e32 < t11.length; ) {
      for (++e32; i2(t11[e32]); ) ++e32;
      let r3 = "";
      for (; e32 < t11.length && ";" !== t11[e32] && "=" !== t11[e32]; ) r3 += t11[e32], ++e32;
      if (r3 = o22(r3), e32 < t11.length) {
        if (";" === t11[e32]) continue;
        ++e32;
      }
      let u3 = null;
      if ('"' === t11[e32]) for ([u3, e32] = l22(t11, e32); e32 < t11.length && ";" !== t11[e32]; ) ++e32;
      else {
        for (u3 = ""; e32 < t11.length && ";" !== t11[e32]; ) u3 += t11[e32], ++e32;
        if ("" === (u3 = n22(u3))) continue;
      }
      r3.length > 0 && s2(r3) && a22(u3) && !h2.parameters.has(r3) && h2.parameters.set(r3, u3);
    }
    return h2;
  };
} });
var y = u({ "../../../node_modules/whatwg-mimetype/lib/serializer.js"(t102, e22) {
  var { solelyContainsHTTPTokenCodePoints: r2 } = d();
  e22.exports = (t11) => {
    let e32 = `${t11.type}/${t11.subtype}`;
    if (0 === t11.parameters.size) return e32;
    for (let [n22, i2] of t11.parameters) e32 += ";" + n22 + "=", r2(i2) && 0 !== i2.length || (i2 = i2.replace(/(["\\])/ug, "\\$1"), i2 = `"${i2}"`), e32 += i2;
    return e32;
  };
} });
var m = u({ "../../../node_modules/whatwg-mimetype/lib/mime-type.js"(t102, e22) {
  var r2 = g(), n22 = v(), i2 = y(), { asciiLowercase: s2, solelyContainsHTTPTokenCodePoints: a22 } = d();
  e22.exports = class {
    static parse(t11) {
      try {
        return new this(t11);
      } catch (t12) {
        return null;
      }
    }
    get essence() {
      return `${this.type}/${this.subtype}`;
    }
    get type() {
      return this._type;
    }
    set type(t11) {
      if (0 === (t11 = s2(String(t11))).length) throw Error("Invalid type: must be a non-empty string");
      if (!a22(t11)) throw Error(`Invalid type ${t11}: must contain only HTTP token code points`);
      this._type = t11;
    }
    get subtype() {
      return this._subtype;
    }
    set subtype(t11) {
      if (0 === (t11 = s2(String(t11))).length) throw Error("Invalid subtype: must be a non-empty string");
      if (!a22(t11)) throw Error(`Invalid subtype ${t11}: must contain only HTTP token code points`);
      this._subtype = t11;
    }
    get parameters() {
      return this._parameters;
    }
    toString() {
      return i2(this);
    }
    isJavaScript({ prohibitParameters: t11 = false } = {}) {
      switch (this._type) {
        case "text":
          switch (this._subtype) {
            case "ecmascript":
            case "javascript":
            case "javascript1.0":
            case "javascript1.1":
            case "javascript1.2":
            case "javascript1.3":
            case "javascript1.4":
            case "javascript1.5":
            case "jscript":
            case "livescript":
            case "x-ecmascript":
            case "x-javascript":
              return !t11 || 0 === this._parameters.size;
            default:
              return false;
          }
        case "application":
          switch (this._subtype) {
            case "ecmascript":
            case "javascript":
            case "x-ecmascript":
            case "x-javascript":
              return !t11 || 0 === this._parameters.size;
            default:
              return false;
          }
        default:
          return false;
      }
    }
    isXML() {
      return "xml" === this._subtype && ("text" === this._type || "application" === this._type) || this._subtype.endsWith("+xml");
    }
    isHTML() {
      return "html" === this._subtype && "text" === this._type;
    }
    constructor(t11) {
      t11 = String(t11);
      let e32 = n22(t11);
      if (null === e32) throw Error(`Could not parse MIME type string "${t11}"`);
      this._type = e32.type, this._subtype = e32.subtype, this._parameters = new r2(e32.parameters);
    }
  };
} });
var w = h(c());
function b(t102, ...e22) {
  if (!t102) throw Error("Assertion Error" + (e22.length > 0 ? ": " + e22.join(" ") : ""));
}
function k(t102) {
  throw Error(`Unexpected value: ${t102}`);
}
var _ = { Uint8: 1, Uint16: 2, Uint32: 4, BigUint64: 8, Int8: 1, Int16: 2, Int32: 4, BigInt64: 8, Float32: 4, Float64: 8 };
var I = class {
  getOffset() {
    return this.offset;
  }
  ensureBufferLength(t102) {
    let e22 = this.buffer.byteLength;
    if (!(this.offset + t102 <= e22)) throw Error("Reading out of bounds");
  }
  readUint8() {
    let t102 = _.Uint8;
    this.ensureBufferLength(t102);
    let e22 = this.view.getUint8(this.offset);
    return this.offset += t102, e22;
  }
  readUint16() {
    let t102 = _.Uint16;
    this.ensureBufferLength(t102);
    let e22 = this.view.getUint16(this.offset);
    return this.offset += t102, e22;
  }
  readUint32() {
    let t102 = _.Uint32;
    this.ensureBufferLength(t102);
    let e22 = this.view.getUint32(this.offset);
    return this.offset += t102, e22;
  }
  readUint64() {
    let t102 = this.readBigUint64();
    return Number(t102);
  }
  readBigUint64() {
    let t102 = _.BigUint64;
    this.ensureBufferLength(t102);
    let e22 = this.view.getBigUint64(this.offset);
    return this.offset += t102, e22;
  }
  readInt8() {
    let t102 = _.Int8;
    this.ensureBufferLength(t102);
    let e22 = this.view.getInt8(this.offset);
    return this.offset += t102, e22;
  }
  readInt16() {
    let t102 = _.Int16;
    this.ensureBufferLength(t102);
    let e22 = this.view.getInt16(this.offset);
    return this.offset += t102, e22;
  }
  readInt32() {
    let t102 = _.Int32;
    this.ensureBufferLength(t102);
    let e22 = this.view.getInt32(this.offset);
    return this.offset += t102, e22;
  }
  readInt64() {
    let t102 = this.readBigInt64();
    return Number(t102);
  }
  readBigInt64() {
    let t102 = _.BigInt64;
    this.ensureBufferLength(t102);
    let e22 = this.view.getBigInt64(this.offset);
    return this.offset += t102, e22;
  }
  readFloat32() {
    let t102 = _.Float32;
    this.ensureBufferLength(t102);
    let e22 = this.view.getFloat32(this.offset);
    return this.offset += t102, e22;
  }
  readFloat64() {
    let t102 = _.Float64;
    this.ensureBufferLength(t102);
    let e22 = this.view.getFloat64(this.offset);
    return this.offset += t102, e22;
  }
  readBuffer(t102) {
    let e22 = this.offset, r2 = e22 + t102, n22 = this.buffer.slice(e22, r2);
    return this.offset = r2, n22;
  }
  readString() {
    let t102 = this.readUint32(), e22 = this.readBuffer(t102);
    return this.decoder.decode(e22);
  }
  readJson() {
    let t102 = this.readString();
    return JSON.parse(t102);
  }
  constructor(t102) {
    this.buffer = t102, this.offset = 0, this.view = new DataView(this.buffer), this.decoder = new TextDecoder();
  }
};
function S(t102) {
  return Number.isFinite(t102);
}
function x(t102) {
  return void 0 === t102;
}
function E(t102) {
  return null === t102;
}
var T = Uint8Array;
var L = Uint16Array;
var M = Int32Array;
var A = new T([
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  1,
  1,
  1,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  4,
  4,
  4,
  4,
  5,
  5,
  5,
  5,
  0,
  /* unused */
  0,
  0,
  /* impossible */
  0
]);
var C = new T([
  0,
  0,
  0,
  0,
  1,
  1,
  2,
  2,
  3,
  3,
  4,
  4,
  5,
  5,
  6,
  6,
  7,
  7,
  8,
  8,
  9,
  9,
  10,
  10,
  11,
  11,
  12,
  12,
  13,
  13,
  /* unused */
  0,
  0
]);
var j = new T([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
var F = function(t102, e22) {
  for (var r2 = new L(31), n22 = 0; n22 < 31; ++n22) r2[n22] = e22 += 1 << t102[n22 - 1];
  for (var i2 = new M(r2[30]), n22 = 1; n22 < 30; ++n22) for (var s2 = r2[n22]; s2 < r2[n22 + 1]; ++s2) i2[s2] = s2 - r2[n22] << 5 | n22;
  return { b: r2, r: i2 };
};
var P = F(A, 2);
var D = P.b;
var N = P.r;
D[28] = 258, N[258] = 28;
var $ = F(C, 0);
var O = $.b;
var q = $.r;
var R = new L(32768);
for (e = 0; e < 32768; ++e) t = (61680 & (t = (52428 & (t = (43690 & e) >> 1 | (21845 & e) << 1)) >> 2 | (13107 & t) << 2)) >> 4 | (3855 & t) << 4, R[e] = ((65280 & t) >> 8 | (255 & t) << 8) >> 1;
var z = function(t102, e22, r2) {
  for (var n22, i2 = t102.length, s2 = 0, a22 = new L(e22); s2 < i2; ++s2) t102[s2] && ++a22[t102[s2] - 1];
  var o22 = new L(e22);
  for (s2 = 1; s2 < e22; ++s2) o22[s2] = o22[s2 - 1] + a22[s2 - 1] << 1;
  if (r2) {
    n22 = new L(1 << e22);
    var l22 = 15 - e22;
    for (s2 = 0; s2 < i2; ++s2) if (t102[s2]) for (var u2 = s2 << 4 | t102[s2], f2 = e22 - t102[s2], h2 = o22[t102[s2] - 1]++ << f2, c2 = h2 | (1 << f2) - 1; h2 <= c2; ++h2) n22[R[h2] >> l22] = u2;
  } else for (s2 = 0, n22 = new L(i2); s2 < i2; ++s2) t102[s2] && (n22[s2] = R[o22[t102[s2] - 1]++] >> 15 - t102[s2]);
  return n22;
};
var H = new T(288);
for (e = 0; e < 144; ++e) H[e] = 8;
for (e = 144; e < 256; ++e) H[e] = 9;
for (e = 256; e < 280; ++e) H[e] = 7;
for (e = 280; e < 288; ++e) H[e] = 8;
var J = new T(32);
for (e = 0; e < 32; ++e) J[e] = 5;
var W = /* @__PURE__ */ z(H, 9, 0);
var G = /* @__PURE__ */ z(H, 9, 1);
var K = /* @__PURE__ */ z(J, 5, 0);
var V = /* @__PURE__ */ z(J, 5, 1);
var X = function(t102) {
  for (var e22 = t102[0], r2 = 1; r2 < t102.length; ++r2) t102[r2] > e22 && (e22 = t102[r2]);
  return e22;
};
var Q = function(t102, e22, r2) {
  var n22 = e22 / 8 | 0;
  return (t102[n22] | t102[n22 + 1] << 8) >> (7 & e22) & r2;
};
var Z = function(t102, e22) {
  var r2 = e22 / 8 | 0;
  return (t102[r2] | t102[r2 + 1] << 8 | t102[r2 + 2] << 16) >> (7 & e22);
};
var Y = function(t102) {
  return (t102 + 7) / 8 | 0;
};
var tt = function(t102, e22, r2) {
  return (null == e22 || e22 < 0) && (e22 = 0), (null == r2 || r2 > t102.length) && (r2 = t102.length), new T(t102.subarray(e22, r2));
};
var te = ["unexpected EOF", "invalid block type", "invalid length/literal", "invalid distance", "stream finished", "no stream handler", , "no callback", "invalid UTF-8 data", "extra field too long", "date not in range 1980-2099", "filename too long", "stream finishing", "invalid zip data"];
var tr = function(t102, e22, r2) {
  var n22 = Error(e22 || te[t102]);
  if (n22.code = t102, Error.captureStackTrace && Error.captureStackTrace(n22, tr), !r2) throw n22;
  return n22;
};
var tn = function(t102, e22, r2, n22) {
  var i2 = t102.length, s2 = n22 ? n22.length : 0;
  if (!i2 || e22.f && !e22.l) return r2 || new T(0);
  var a22 = !r2, o22 = a22 || 2 != e22.i, l22 = e22.i;
  a22 && (r2 = new T(3 * i2));
  var u2 = function(t11) {
    var e32 = r2.length;
    if (t11 > e32) {
      var n3 = new T(Math.max(2 * e32, t11));
      n3.set(r2), r2 = n3;
    }
  }, f2 = e22.f || 0, h2 = e22.p || 0, c2 = e22.b || 0, p2 = e22.l, d2 = e22.d, g2 = e22.m, v2 = e22.n, y2 = 8 * i2;
  do {
    if (!p2) {
      f2 = Q(t102, h2, 1);
      var m2 = Q(t102, h2 + 1, 3);
      if (h2 += 3, m2) {
        if (1 == m2) p2 = G, d2 = V, g2 = 9, v2 = 5;
        else if (2 == m2) {
          var w2 = Q(t102, h2, 31) + 257, b2 = Q(t102, h2 + 10, 15) + 4, k2 = w2 + Q(t102, h2 + 5, 31) + 1;
          h2 += 14;
          for (var _2 = new T(k2), I2 = new T(19), U2 = 0; U2 < b2; ++U2) I2[j[U2]] = Q(t102, h2 + 3 * U2, 7);
          h2 += 3 * b2;
          for (var S2 = X(I2), x2 = (1 << S2) - 1, E2 = z(I2, S2, 1), U2 = 0; U2 < k2; ) {
            var B2 = E2[Q(t102, h2, x2)];
            h2 += 15 & B2;
            var L2 = B2 >> 4;
            if (L2 < 16) _2[U2++] = L2;
            else {
              var M2 = 0, F2 = 0;
              for (16 == L2 ? (F2 = 3 + Q(t102, h2, 3), h2 += 2, M2 = _2[U2 - 1]) : 17 == L2 ? (F2 = 3 + Q(t102, h2, 7), h2 += 3) : 18 == L2 && (F2 = 11 + Q(t102, h2, 127), h2 += 7); F2--; ) _2[U2++] = M2;
            }
          }
          var P2 = _2.subarray(0, w2), N2 = _2.subarray(w2);
          g2 = X(P2), v2 = X(N2), p2 = z(P2, g2, 1), d2 = z(N2, v2, 1);
        } else tr(1);
      } else {
        var L2 = Y(h2) + 4, $2 = t102[L2 - 4] | t102[L2 - 3] << 8, q2 = L2 + $2;
        if (q2 > i2) {
          l22 && tr(0);
          break;
        }
        o22 && u2(c2 + $2), r2.set(t102.subarray(L2, q2), c2), e22.b = c2 += $2, e22.p = h2 = 8 * q2, e22.f = f2;
        continue;
      }
      if (h2 > y2) {
        l22 && tr(0);
        break;
      }
    }
    o22 && u2(c2 + 131072);
    for (var R2 = (1 << g2) - 1, H2 = (1 << v2) - 1, J2 = h2; ; J2 = h2) {
      var M2 = p2[Z(t102, h2) & R2], W2 = M2 >> 4;
      if ((h2 += 15 & M2) > y2) {
        l22 && tr(0);
        break;
      }
      if (M2 || tr(2), W2 < 256) r2[c2++] = W2;
      else if (256 == W2) {
        J2 = h2, p2 = null;
        break;
      } else {
        var K2 = W2 - 254;
        if (W2 > 264) {
          var U2 = W2 - 257, te2 = A[U2];
          K2 = Q(t102, h2, (1 << te2) - 1) + D[U2], h2 += te2;
        }
        var tn2 = d2[Z(t102, h2) & H2], ti2 = tn2 >> 4;
        tn2 || tr(3), h2 += 15 & tn2;
        var N2 = O[ti2];
        if (ti2 > 3) {
          var te2 = C[ti2];
          N2 += Z(t102, h2) & (1 << te2) - 1, h2 += te2;
        }
        if (h2 > y2) {
          l22 && tr(0);
          break;
        }
        o22 && u2(c2 + 131072);
        var ts2 = c2 + K2;
        if (c2 < N2) {
          var ta2 = s2 - N2, to2 = Math.min(N2, ts2);
          for (ta2 + c2 < 0 && tr(3); c2 < to2; ++c2) r2[c2] = n22[ta2 + c2];
        }
        for (; c2 < ts2; ++c2) r2[c2] = r2[c2 - N2];
      }
    }
    e22.l = p2, e22.p = J2, e22.b = c2, e22.f = f2, p2 && (f2 = 1, e22.m = g2, e22.d = d2, e22.n = v2);
  } while (!f2);
  return c2 != r2.length && a22 ? tt(r2, 0, c2) : r2.subarray(0, c2);
};
var ti = function(t102, e22, r2) {
  r2 <<= 7 & e22;
  var n22 = e22 / 8 | 0;
  t102[n22] |= r2, t102[n22 + 1] |= r2 >> 8;
};
var ts = function(t102, e22, r2) {
  r2 <<= 7 & e22;
  var n22 = e22 / 8 | 0;
  t102[n22] |= r2, t102[n22 + 1] |= r2 >> 8, t102[n22 + 2] |= r2 >> 16;
};
var ta = function(t102, e22) {
  for (var r2 = [], n22 = 0; n22 < t102.length; ++n22) t102[n22] && r2.push({ s: n22, f: t102[n22] });
  var i2 = r2.length, s2 = r2.slice();
  if (!i2) return { t: tp, l: 0 };
  if (1 == i2) {
    var a22 = new T(r2[0].s + 1);
    return a22[r2[0].s] = 1, { t: a22, l: 1 };
  }
  r2.sort(function(t11, e32) {
    return t11.f - e32.f;
  }), r2.push({ s: -1, f: 25001 });
  var o22 = r2[0], l22 = r2[1], u2 = 0, f2 = 1, h2 = 2;
  for (r2[0] = { s: -1, f: o22.f + l22.f, l: o22, r: l22 }; f2 != i2 - 1; ) o22 = r2[r2[u2].f < r2[h2].f ? u2++ : h2++], l22 = r2[u2 != f2 && r2[u2].f < r2[h2].f ? u2++ : h2++], r2[f2++] = { s: -1, f: o22.f + l22.f, l: o22, r: l22 };
  for (var c2 = s2[0].s, n22 = 1; n22 < i2; ++n22) s2[n22].s > c2 && (c2 = s2[n22].s);
  var p2 = new L(c2 + 1), d2 = to(r2[f2 - 1], p2, 0);
  if (d2 > e22) {
    var n22 = 0, g2 = 0, v2 = d2 - e22, y2 = 1 << v2;
    for (s2.sort(function(t11, e32) {
      return p2[e32.s] - p2[t11.s] || t11.f - e32.f;
    }); n22 < i2; ++n22) {
      var m2 = s2[n22].s;
      if (p2[m2] > e22) g2 += y2 - (1 << d2 - p2[m2]), p2[m2] = e22;
      else break;
    }
    for (g2 >>= v2; g2 > 0; ) {
      var w2 = s2[n22].s;
      p2[w2] < e22 ? g2 -= 1 << e22 - p2[w2]++ - 1 : ++n22;
    }
    for (; n22 >= 0 && g2; --n22) {
      var b2 = s2[n22].s;
      p2[b2] == e22 && (--p2[b2], ++g2);
    }
    d2 = e22;
  }
  return { t: new T(p2), l: d2 };
};
var to = function(t102, e22, r2) {
  return -1 == t102.s ? Math.max(to(t102.l, e22, r2 + 1), to(t102.r, e22, r2 + 1)) : e22[t102.s] = r2;
};
var tl = function(t102) {
  for (var e22 = t102.length; e22 && !t102[--e22]; ) ;
  for (var r2 = new L(++e22), n22 = 0, i2 = t102[0], s2 = 1, a22 = function(t11) {
    r2[n22++] = t11;
  }, o22 = 1; o22 <= e22; ++o22) if (t102[o22] == i2 && o22 != e22) ++s2;
  else {
    if (!i2 && s2 > 2) {
      for (; s2 > 138; s2 -= 138) a22(32754);
      s2 > 2 && (a22(s2 > 10 ? s2 - 11 << 5 | 28690 : s2 - 3 << 5 | 12305), s2 = 0);
    } else if (s2 > 3) {
      for (a22(i2), --s2; s2 > 6; s2 -= 6) a22(8304);
      s2 > 2 && (a22(s2 - 3 << 5 | 8208), s2 = 0);
    }
    for (; s2--; ) a22(i2);
    s2 = 1, i2 = t102[o22];
  }
  return { c: r2.subarray(0, n22), n: e22 };
};
var tu = function(t102, e22) {
  for (var r2 = 0, n22 = 0; n22 < e22.length; ++n22) r2 += t102[n22] * e22[n22];
  return r2;
};
var tf = function(t102, e22, r2) {
  var n22 = r2.length, i2 = Y(e22 + 2);
  t102[i2] = 255 & n22, t102[i2 + 1] = n22 >> 8, t102[i2 + 2] = 255 ^ t102[i2], t102[i2 + 3] = 255 ^ t102[i2 + 1];
  for (var s2 = 0; s2 < n22; ++s2) t102[i2 + s2 + 4] = r2[s2];
  return (i2 + 4 + n22) * 8;
};
var th = function(t102, e22, r2, n22, i2, s2, a22, o22, l22, u2, f2) {
  ti(e22, f2++, r2), ++i2[256];
  for (var h2, c2, p2, d2, g2 = ta(i2, 15), v2 = g2.t, y2 = g2.l, m2 = ta(s2, 15), w2 = m2.t, b2 = m2.l, k2 = tl(v2), _2 = k2.c, I2 = k2.n, U2 = tl(w2), S2 = U2.c, x2 = U2.n, E2 = new L(19), B2 = 0; B2 < _2.length; ++B2) ++E2[31 & _2[B2]];
  for (var B2 = 0; B2 < S2.length; ++B2) ++E2[31 & S2[B2]];
  for (var T2 = ta(E2, 7), M2 = T2.t, F2 = T2.l, P2 = 19; P2 > 4 && !M2[j[P2 - 1]]; --P2) ;
  var D2 = u2 + 5 << 3, N2 = tu(i2, H) + tu(s2, J) + a22, $2 = tu(i2, v2) + tu(s2, w2) + a22 + 14 + 3 * P2 + tu(E2, M2) + 2 * E2[16] + 3 * E2[17] + 7 * E2[18];
  if (l22 >= 0 && D2 <= N2 && D2 <= $2) return tf(e22, f2, t102.subarray(l22, l22 + u2));
  if (ti(e22, f2, 1 + ($2 < N2)), f2 += 2, $2 < N2) {
    h2 = z(v2, y2, 0), c2 = v2, p2 = z(w2, b2, 0), d2 = w2;
    var O2 = z(M2, F2, 0);
    ti(e22, f2, I2 - 257), ti(e22, f2 + 5, x2 - 1), ti(e22, f2 + 10, P2 - 4), f2 += 14;
    for (var B2 = 0; B2 < P2; ++B2) ti(e22, f2 + 3 * B2, M2[j[B2]]);
    f2 += 3 * P2;
    for (var q2 = [_2, S2], R2 = 0; R2 < 2; ++R2) for (var G2 = q2[R2], B2 = 0; B2 < G2.length; ++B2) {
      var V2 = 31 & G2[B2];
      ti(e22, f2, O2[V2]), f2 += M2[V2], V2 > 15 && (ti(e22, f2, G2[B2] >> 5 & 127), f2 += G2[B2] >> 12);
    }
  } else h2 = W, c2 = H, p2 = K, d2 = J;
  for (var B2 = 0; B2 < o22; ++B2) {
    var X2 = n22[B2];
    if (X2 > 255) {
      var V2 = X2 >> 18 & 31;
      ts(e22, f2, h2[V2 + 257]), f2 += c2[V2 + 257], V2 > 7 && (ti(e22, f2, X2 >> 23 & 31), f2 += A[V2]);
      var Q2 = 31 & X2;
      ts(e22, f2, p2[Q2]), f2 += d2[Q2], Q2 > 3 && (ts(e22, f2, X2 >> 5 & 8191), f2 += C[Q2]);
    } else ts(e22, f2, h2[X2]), f2 += c2[X2];
  }
  return ts(e22, f2, h2[256]), f2 + c2[256];
};
var tc = /* @__PURE__ */ new M([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);
var tp = /* @__PURE__ */ new T(0);
var td = function(t102, e22, r2, n22, i2, s2) {
  var a22 = s2.z || t102.length, o22 = new T(n22 + a22 + 5 * (1 + Math.ceil(a22 / 7e3)) + i2), l22 = o22.subarray(n22, o22.length - i2), u2 = s2.l, f2 = 7 & (s2.r || 0);
  if (e22) {
    f2 && (l22[0] = s2.r >> 3);
    for (var h2 = tc[e22 - 1], c2 = h2 >> 13, p2 = 8191 & h2, d2 = (1 << r2) - 1, g2 = s2.p || new L(32768), v2 = s2.h || new L(d2 + 1), y2 = Math.ceil(r2 / 3), m2 = 2 * y2, w2 = function(e32) {
      return (t102[e32] ^ t102[e32 + 1] << y2 ^ t102[e32 + 2] << m2) & d2;
    }, b2 = new M(25e3), k2 = new L(288), _2 = new L(32), I2 = 0, U2 = 0, S2 = s2.i || 0, x2 = 0, E2 = s2.w || 0, B2 = 0; S2 + 2 < a22; ++S2) {
      var j2 = w2(S2), F2 = 32767 & S2, P2 = v2[j2];
      if (g2[F2] = P2, v2[j2] = F2, E2 <= S2) {
        var D2 = a22 - S2;
        if ((I2 > 7e3 || x2 > 24576) && (D2 > 423 || !u2)) {
          f2 = th(t102, l22, 0, b2, k2, _2, U2, x2, B2, S2 - B2, f2), x2 = I2 = U2 = 0, B2 = S2;
          for (var $2 = 0; $2 < 286; ++$2) k2[$2] = 0;
          for (var $2 = 0; $2 < 30; ++$2) _2[$2] = 0;
        }
        var O2 = 2, R2 = 0, z2 = p2, H2 = F2 - P2 & 32767;
        if (D2 > 2 && j2 == w2(S2 - H2)) for (var J2 = Math.min(c2, D2) - 1, W2 = Math.min(32767, S2), G2 = Math.min(258, D2); H2 <= W2 && --z2 && F2 != P2; ) {
          if (t102[S2 + O2] == t102[S2 + O2 - H2]) {
            for (var K2 = 0; K2 < G2 && t102[S2 + K2] == t102[S2 + K2 - H2]; ++K2) ;
            if (K2 > O2) {
              if (O2 = K2, R2 = H2, K2 > J2) break;
              for (var V2 = Math.min(H2, K2 - 2), X2 = 0, $2 = 0; $2 < V2; ++$2) {
                var Q2 = S2 - H2 + $2 & 32767, Z2 = g2[Q2], te2 = Q2 - Z2 & 32767;
                te2 > X2 && (X2 = te2, P2 = Q2);
              }
            }
          }
          P2 = g2[F2 = P2], H2 += F2 - P2 & 32767;
        }
        if (R2) {
          b2[x2++] = 268435456 | N[O2] << 18 | q[R2];
          var tr2 = 31 & N[O2], tn2 = 31 & q[R2];
          U2 += A[tr2] + C[tn2], ++k2[257 + tr2], ++_2[tn2], E2 = S2 + O2, ++I2;
        } else b2[x2++] = t102[S2], ++k2[t102[S2]];
      }
    }
    for (S2 = Math.max(S2, E2); S2 < a22; ++S2) b2[x2++] = t102[S2], ++k2[t102[S2]];
    f2 = th(t102, l22, u2, b2, k2, _2, U2, x2, B2, S2 - B2, f2), u2 || (s2.r = 7 & f2 | l22[f2 / 8 | 0] << 3, f2 -= 7, s2.h = v2, s2.p = g2, s2.i = S2, s2.w = E2);
  } else {
    for (var S2 = s2.w || 0; S2 < a22 + u2; S2 += 65535) {
      var ti2 = S2 + 65535;
      ti2 >= a22 && (l22[f2 / 8 | 0] = u2, ti2 = a22), f2 = tf(l22, f2 + 1, t102.subarray(S2, ti2));
    }
    s2.i = a22;
  }
  return tt(o22, 0, n22 + Y(f2) + i2);
};
var tg = function(t102, e22, r2, n22, i2) {
  if (!i2 && (i2 = { l: 1 }, e22.dictionary)) {
    var s2 = e22.dictionary.subarray(-32768), a22 = new T(s2.length + t102.length);
    a22.set(s2), a22.set(t102, s2.length), t102 = a22, i2.w = s2.length;
  }
  return td(t102, null == e22.level ? 6 : e22.level, null == e22.mem ? i2.l ? Math.ceil(1.5 * Math.max(8, Math.min(13, Math.log(t102.length)))) : 20 : 12 + e22.mem, r2, n22, i2);
};
function tv(t102, e22) {
  return tg(t102, e22 || {}, 0, 0);
}
function ty(t102, e22) {
  return tn(t102, { i: 2 }, e22 && e22.out, e22 && e22.dictionary);
}
var tm = "undefined" != typeof TextDecoder && /* @__PURE__ */ new TextDecoder();
var tw = 0;
try {
  tm.decode(tp, { stream: true }), tw = 1;
} catch (t102) {
}
var tb = h(p());
var tk = 1024;
var t_ = 1.5;
var tI = (t102) => 2 ** t102 - 1;
var tU = (t102) => -(2 ** (t102 - 1));
var tS = (t102) => 2 ** (t102 - 1) - 1;
var tx = { Uint8: 0, Uint16: 0, Uint32: 0, Uint64: 0, BigUint64: 0, Int8: tU(8), Int16: tU(16), Int32: tU(32), Int64: Number.MIN_SAFE_INTEGER, BigInt64: -(BigInt(2) ** BigInt(63)) };
var tE = { Uint8: tI(8), Uint16: tI(16), Uint32: tI(32), Uint64: Number.MAX_SAFE_INTEGER, BigUint64: BigInt(2) ** BigInt(64) - BigInt(1), Int8: tS(8), Int16: tS(16), Int32: tS(32), Int64: Number.MAX_SAFE_INTEGER, BigInt64: BigInt(2) ** BigInt(63) - BigInt(1) };
function tB(t102, e22, r2, n22) {
  b(t102 >= e22, t102, "outside lower bound for", n22), b(t102 <= r2, t102, "outside upper bound for", n22);
}
var tT = class {
  getOffset() {
    return this.offset;
  }
  slice(t102 = 0, e22 = this.offset) {
    return this.buffer.slice(t102, e22);
  }
  subarray(t102 = 0, e22 = this.offset) {
    return new Uint8Array(this.buffer, t102, e22);
  }
  ensureBufferLength(t102) {
    let e22 = this.buffer.byteLength;
    if (this.offset + t102 <= e22) return;
    let r2 = new ArrayBuffer(Math.ceil(e22 * t_) + t102);
    tL(this.buffer, r2, 0), this.buffer = r2, this.view = new DataView(r2);
  }
  writeUint8(t102) {
    tB(t102, tx.Uint8, tE.Uint8, "Uint8");
    let e22 = _.Uint8;
    this.ensureBufferLength(e22), this.view.setUint8(this.offset, t102), this.offset += e22;
  }
  writeUint16(t102) {
    tB(t102, tx.Uint16, tE.Uint16, "Uint16");
    let e22 = _.Uint16;
    this.ensureBufferLength(e22), this.view.setUint16(this.offset, t102), this.offset += e22;
  }
  writeUint32(t102) {
    tB(t102, tx.Uint32, tE.Uint32, "Uint32");
    let e22 = _.Uint32;
    this.ensureBufferLength(e22), this.view.setUint32(this.offset, t102), this.offset += e22;
  }
  writeUint64(t102) {
    tB(t102, tx.Uint64, tE.Uint64, "Uint64");
    let e22 = BigInt(t102);
    this.writeBigUint64(e22);
  }
  writeBigUint64(t102) {
    tB(t102, tx.BigUint64, tE.BigUint64, "BigUint64");
    let e22 = _.BigUint64;
    this.ensureBufferLength(e22), this.view.setBigUint64(this.offset, t102), this.offset += e22;
  }
  writeInt8(t102) {
    tB(t102, tx.Int8, tE.Int8, "Int8");
    let e22 = _.Int8;
    this.ensureBufferLength(e22), this.view.setInt8(this.offset, t102), this.offset += e22;
  }
  writeInt16(t102) {
    tB(t102, tx.Int16, tE.Int16, "Int16");
    let e22 = _.Int16;
    this.ensureBufferLength(e22), this.view.setInt16(this.offset, t102), this.offset += e22;
  }
  writeInt32(t102) {
    tB(t102, tx.Int32, tE.Int32, "Int32");
    let e22 = _.Int32;
    this.ensureBufferLength(e22), this.view.setInt32(this.offset, t102), this.offset += e22;
  }
  writeInt64(t102) {
    tB(t102, tx.Int64, tE.Int64, "Int64");
    let e22 = BigInt(t102);
    this.writeBigInt64(e22);
  }
  writeBigInt64(t102) {
    tB(t102, tx.BigInt64, tE.BigInt64, "BigInt64");
    let e22 = _.BigInt64;
    this.ensureBufferLength(e22), this.view.setBigInt64(this.offset, t102), this.offset += e22;
  }
  writeFloat32(t102) {
    let e22 = _.Float32;
    this.ensureBufferLength(e22), this.view.setFloat32(this.offset, t102), this.offset += e22;
  }
  writeFloat64(t102) {
    let e22 = _.Float64;
    this.ensureBufferLength(e22), this.view.setFloat64(this.offset, t102), this.offset += e22;
  }
  writeBuffer(t102) {
    let e22 = t102.byteLength;
    this.ensureBufferLength(e22), tL(t102, this.buffer, this.offset), this.offset += e22;
  }
  encodeString(t102) {
    let e22 = this.encodedStrings.get(t102);
    if (e22) return e22;
    let r2 = this.encoder.encode(t102);
    return this.encodedStrings.set(t102, r2), r2;
  }
  writeString(t102) {
    let e22 = this.encodeString(t102), r2 = e22.byteLength;
    this.writeUint32(r2), this.writeBuffer(e22);
  }
  writeJson(t102) {
    let e22 = JSON.stringify(t102);
    this.writeString(e22);
  }
  constructor() {
    this.offset = 0, this.buffer = new ArrayBuffer(tk), this.view = new DataView(this.buffer), this.encoder = new TextEncoder(), this.encodedStrings = /* @__PURE__ */ new Map();
  }
};
function tL(t102, e22, r2) {
  let n22 = new Uint8Array(t102), i2 = new Uint8Array(e22);
  i2.set(n22, r2);
}
var tM = class {
  static fromString(t102) {
    let [e22, r2, n22] = t102.split("/").map(Number);
    return b(S(e22), "Invalid chunkId"), b(S(r2), "Invalid offset"), b(S(n22), "Invalid length"), new tM(e22, r2, n22);
  }
  toString() {
    return `${this.chunkId}/${this.offset}/${this.length}`;
  }
  static read(t102) {
    let e22 = t102.readUint16(), r2 = t102.readUint32(), n22 = t102.readUint32();
    return new tM(e22, r2, n22);
  }
  write(t102) {
    t102.writeUint16(this.chunkId), t102.writeUint32(this.offset), t102.writeUint32(this.length);
  }
  compare(t102) {
    return this.chunkId < t102.chunkId ? -1 : this.chunkId > t102.chunkId ? 1 : this.offset < t102.offset ? -1 : this.offset > t102.offset ? 1 : (b(this.length === t102.length), 0);
  }
  constructor(t102, e22, r2) {
    this.chunkId = t102, this.offset = e22, this.length = r2;
  }
};
function tC(t102) {
  if (E(t102)) return 0;
  switch (t102.type) {
    case tA.Array:
      return 1;
    case tA.Boolean:
      return 2;
    case tA.Color:
      return 3;
    case tA.Date:
      return 4;
    case tA.Enum:
      return 5;
    case tA.File:
      return 6;
    case tA.ResponsiveImage:
      return 10;
    case tA.Link:
      return 7;
    case tA.Number:
      return 8;
    case tA.Object:
      return 9;
    case tA.RichText:
      return 11;
    case tA.String:
      return 12;
    default:
      k(t102);
  }
}
((t102) => {
  t102.read = function(t11) {
    let e22 = t11.readUint8();
    switch (e22) {
      case 0:
        return null;
      case 1:
        return tj.read(t11);
      case 2:
        return tF.read(t11);
      case 3:
        return tP.read(t11);
      case 4:
        return tD.read(t11);
      case 5:
        return tN.read(t11);
      case 6:
        return t$.read(t11);
      case 7:
        return tO.read(t11);
      case 8:
        return tq.read(t11);
      case 9:
        return tR.read(t11);
      case 10:
        return tz.read(t11);
      case 11:
        return tH.read(t11);
      case 12:
        return tJ.read(t11);
      default:
        k(e22);
    }
  }, t102.write = function(t11, e22) {
    let r2 = tC(e22);
    if (t11.writeUint8(r2), !E(e22)) switch (e22.type) {
      case tA.Array:
        return tj.write(t11, e22);
      case tA.Boolean:
        return tF.write(t11, e22);
      case tA.Color:
        return tP.write(t11, e22);
      case tA.Date:
        return tD.write(t11, e22);
      case tA.Enum:
        return tN.write(t11, e22);
      case tA.File:
        return t$.write(t11, e22);
      case tA.Link:
        return tO.write(t11, e22);
      case tA.Number:
        return tq.write(t11, e22);
      case tA.Object:
        return tR.write(t11, e22);
      case tA.ResponsiveImage:
        return tz.write(t11, e22);
      case tA.RichText:
        return tH.write(t11, e22);
      case tA.String:
        return tJ.write(t11, e22);
      default:
        k(e22);
    }
  }, t102.compare = function(t11, e22, r2) {
    let n22 = tC(t11), i2 = tC(e22);
    if (n22 < i2) return -1;
    if (n22 > i2) return 1;
    if (E(t11) || E(e22)) return 0;
    switch (t11.type) {
      case tA.Array:
        return b(e22.type === tA.Array), tj.compare(t11, e22, r2);
      case tA.Boolean:
        return b(e22.type === tA.Boolean), tF.compare(t11, e22, r2);
      case tA.Color:
        return b(e22.type === tA.Color), tP.compare(t11, e22, r2);
      case tA.Date:
        return b(e22.type === tA.Date), tD.compare(t11, e22, r2);
      case tA.Enum:
        return b(e22.type === tA.Enum), tN.compare(t11, e22, r2);
      case tA.File:
        return b(e22.type === tA.File), t$.compare(t11, e22, r2);
      case tA.Link:
        return b(e22.type === tA.Link), tO.compare(t11, e22, r2);
      case tA.Number:
        return b(e22.type === tA.Number), tq.compare(t11, e22, r2);
      case tA.Object:
        return b(e22.type === tA.Object), tR.compare(t11, e22, r2);
      case tA.ResponsiveImage:
        return b(e22.type === tA.ResponsiveImage), tz.compare(t11, e22, r2);
      case tA.RichText:
        return b(e22.type === tA.RichText), tH.compare(t11, e22, r2);
      case tA.String:
        return b(e22.type === tA.String), tJ.compare(t11, e22, r2);
      default:
        k(t11);
    }
  };
})(r || (r = {}));
var tj = { read(t102) {
  let e22 = t102.readUint16(), n22 = [];
  for (let i2 = 0; i2 < e22; i2++) {
    let e32 = r.read(t102);
    n22.push(e32);
  }
  return { type: tA.Array, value: n22 };
}, write(t102, e22) {
  for (let n22 of (t102.writeUint16(e22.value.length), e22.value)) r.write(t102, n22);
}, compare(t102, e22, n22) {
  let i2 = t102.value.length, s2 = e22.value.length;
  if (i2 < s2) return -1;
  if (i2 > s2) return 1;
  for (let s3 = 0; s3 < i2; s3++) {
    let i3 = t102.value[s3], a22 = e22.value[s3];
    b(!x(i3), "Left item must exist"), b(!x(a22), "Right item must exist");
    let o22 = r.compare(i3, a22, n22);
    if (0 !== o22) return o22;
  }
  return 0;
} };
var tF = { read: (t102) => ({ type: tA.Boolean, value: 0 !== t102.readUint8() }), write(t102, e22) {
  t102.writeUint8(e22.value ? 1 : 0);
}, compare: (t102, e22) => t102.value < e22.value ? -1 : t102.value > e22.value ? 1 : 0 };
var tP = { read: (t102) => ({ type: tA.Color, value: t102.readString() }), write(t102, e22) {
  t102.writeString(e22.value);
}, compare: (t102, e22) => t102.value < e22.value ? -1 : t102.value > e22.value ? 1 : 0 };
var tD = { read(t102) {
  let e22 = t102.readInt64(), r2 = new Date(e22);
  return { type: tA.Date, value: r2.toISOString() };
}, write(t102, e22) {
  let r2 = new Date(e22.value), n22 = r2.getTime();
  t102.writeInt64(n22);
}, compare(t102, e22) {
  let r2 = new Date(t102.value), n22 = new Date(e22.value);
  return r2 < n22 ? -1 : r2 > n22 ? 1 : 0;
} };
var tN = { read: (t102) => ({ type: tA.Enum, value: t102.readString() }), write(t102, e22) {
  t102.writeString(e22.value);
}, compare: (t102, e22) => t102.value < e22.value ? -1 : t102.value > e22.value ? 1 : 0 };
var t$ = { read: (t102) => ({ type: tA.File, value: t102.readString() }), write(t102, e22) {
  t102.writeString(e22.value);
}, compare: (t102, e22) => t102.value < e22.value ? -1 : t102.value > e22.value ? 1 : 0 };
var tO = { read: (t102) => ({ type: tA.Link, value: t102.readJson() }), write(t102, e22) {
  t102.writeJson(e22.value);
}, compare(t102, e22) {
  let r2 = JSON.stringify(t102.value), n22 = JSON.stringify(e22.value);
  return r2 < n22 ? -1 : r2 > n22 ? 1 : 0;
} };
var tq = { read: (t102) => ({ type: tA.Number, value: t102.readFloat64() }), write(t102, e22) {
  t102.writeFloat64(e22.value);
}, compare: (t102, e22) => t102.value < e22.value ? -1 : t102.value > e22.value ? 1 : 0 };
var tR = { read(t102) {
  let e22 = t102.readUint16(), n22 = {};
  for (let i2 = 0; i2 < e22; i2++) {
    let e32 = t102.readString();
    n22[e32] = r.read(t102);
  }
  return { type: tA.Object, value: n22 };
}, write(t102, e22) {
  let n22 = Object.entries(e22.value);
  for (let [e32, i2] of (t102.writeUint16(n22.length), n22)) t102.writeString(e32), r.write(t102, i2);
}, compare(t102, e22, n22) {
  let i2 = Object.keys(t102.value).sort(), s2 = Object.keys(e22.value).sort();
  if (i2.length < s2.length) return -1;
  if (i2.length > s2.length) return 1;
  for (let a22 = 0; a22 < i2.length; a22++) {
    let o22 = i2[a22], l22 = s2[a22];
    if (b(!x(o22), "Left key must exist"), b(!x(l22), "Left key must exist"), o22 < l22) return -1;
    if (o22 > l22) return 1;
    let u2 = t102.value[o22], f2 = e22.value[l22];
    b(!x(u2), "Left value must exist"), b(!x(f2), "Right value must exist");
    let h2 = r.compare(u2, f2, n22);
    if (0 !== h2) return h2;
  }
  return 0;
} };
var tz = { read: (t102) => ({ type: tA.ResponsiveImage, value: t102.readJson() }), write(t102, e22) {
  t102.writeJson(e22.value);
}, compare(t102, e22) {
  let r2 = JSON.stringify(t102.value), n22 = JSON.stringify(e22.value);
  return r2 < n22 ? -1 : r2 > n22 ? 1 : 0;
} };
var tH = { read: (t102) => ({ type: tA.RichText, value: t102.readUint32() }), write(t102, e22) {
  t102.writeUint32(e22.value);
}, compare(t102, e22) {
  let r2 = t102.value, n22 = e22.value;
  return r2 < n22 ? -1 : r2 > n22 ? 1 : 0;
} };
var tJ = { read: (t102) => ({ type: tA.String, value: t102.readString() }), write(t102, e22) {
  t102.writeString(e22.value);
}, compare(t102, e22, r2) {
  let n22 = t102.value, i2 = e22.value;
  return (0 === r2.type && (n22 = t102.value.toLowerCase(), i2 = e22.value.toLowerCase()), n22 < i2) ? -1 : n22 > i2 ? 1 : 0;
} };
var tG = 3;
var tK = 250;
var tV = [
  408,
  // Request Timeout
  429,
  // Too Many Requests
  500,
  // Internal Server Error
  502,
  // Bad Gateway
  503,
  // Service Unavailable
  504
];
var tX = async (t102, e22) => {
  var r2;
  let n22 = 0;
  for (; ; ) {
    try {
      let r3 = await fetch(t102, e22);
      if (!tV.includes(r3.status) || ++n22 > tG) return r3;
    } catch (t11) {
      if ((null == (r2 = null == e22 ? void 0 : e22.signal) ? void 0 : r2.aborted) || ++n22 > tG) throw t11;
    }
    await tQ(n22);
  }
};
async function tQ(t102) {
  let e22 = Math.floor(tK * (Math.random() + 1) * 2 ** (t102 - 1));
  await new Promise((t11) => {
    setTimeout(t11, e22);
  });
}
function tZ(t102) {
  let e22 = 3 & t102.length, r2 = t102.length - e22, n22 = 0, i2 = 0;
  for (; i2 < r2; ) {
    let e32 = 255 & t102.charCodeAt(i2) | (255 & t102.charCodeAt(++i2)) << 8 | (255 & t102.charCodeAt(++i2)) << 16 | (255 & t102.charCodeAt(++i2)) << 24;
    ++i2, n22 ^= e32 = (65535 & (e32 = (e32 = (65535 & e32) * 3432918353 + (((e32 >>> 16) * 3432918353 & 65535) << 16) & 4294967295) << 15 | e32 >>> 17)) * 461845907 + (((e32 >>> 16) * 461845907 & 65535) << 16) & 4294967295, n22 = n22 << 13 | n22 >>> 19;
    let r3 = (65535 & n22) * 5 + (((n22 >>> 16) * 5 & 65535) << 16) & 4294967295;
    n22 = (65535 & r3) + 27492 + (((r3 >>> 16) + 58964 & 65535) << 16);
  }
  let s2 = 0;
  return e22 >= 3 && (s2 ^= (255 & t102.charCodeAt(i2 + 2)) << 16), e22 >= 2 && (s2 ^= (255 & t102.charCodeAt(i2 + 1)) << 8), e22 >= 1 && (s2 ^= 255 & t102.charCodeAt(i2), n22 ^= s2 = (65535 & (s2 = (s2 = (65535 & s2) * 3432918353 + (((s2 >>> 16) * 3432918353 & 65535) << 16) & 4294967295) << 15 | s2 >>> 17)) * 461845907 + (((s2 >>> 16) * 461845907 & 65535) << 16) & 4294967295), n22 ^= t102.length, n22 ^= n22 >>> 16, n22 = (65535 & n22) * 2246822507 + (((n22 >>> 16) * 2246822507 & 65535) << 16) & 4294967295, n22 ^= n22 >>> 13, n22 = (65535 & n22) * 3266489909 + (((n22 >>> 16) * 3266489909 & 65535) << 16) & 4294967295, (n22 ^= n22 >>> 16) >>> 0;
}
var tY = h(m());
var t1 = "\r\n";
var t0 = "--";
async function t2(t102, e22) {
  let r2 = new URL(t102), n22 = en(e22);
  r2.searchParams.set("rangeHash", tZ(n22).toString(16));
  let i2 = await tX(r2, { headers: { Range: n22 } });
  if (!i2.ok) throw Error(`Request failed: ${i2.status} ${i2.statusText}`);
  let s2 = await i2.arrayBuffer(), a22 = new Uint8Array(s2);
  if (200 === i2.status) return e22.map((t11) => {
    if (t11.to > a22.length) throw Error("Missing data");
    return a22.slice(t11.from, t11.to);
  });
  if (206 === i2.status) {
    let t11 = i2.headers.get("Content-Type");
    if (!t11) throw Error("Missing Content-Type header");
    let r3 = new t8(), n3 = new tY.default(t11);
    if ("multipart" === n3.type && "byteranges" === n3.subtype) {
      let t12 = n3.parameters.get("boundary");
      if (!t12) throw Error("Missing boundary parameter");
      let e32 = t5(a22, t12);
      for (let { headers: t13, body: n4 } of e32) {
        let e4 = t13.get("Content-Range");
        if (!e4) throw Error("Missing Content-Range header");
        let i3 = t4(e4);
        if ("bytes" !== i3.unit) throw Error("Unsupported unit");
        r3.write(i3.start, n4);
      }
    } else {
      let t12 = i2.headers.get("Content-Range");
      if (!t12) throw Error("Missing Content-Range header");
      let e32 = t4(t12);
      if ("bytes" !== e32.unit) throw Error("Unsupported unit");
      r3.write(e32.start, a22);
    }
    return e22.map((t12) => r3.read(t12.from, t12.to - t12.from));
  }
  throw Error(`Unsupported response: ${i2.status} ${i2.statusText}`);
}
var t6 = new TextEncoder();
var t3 = new TextDecoder();
function t5(t102, e22) {
  let r2 = t6.encode(t0 + e22), n22 = t9(t102, r2);
  if (x(n22)) throw Error("Missing parts start");
  let i2 = n22 + r2.length, s2 = t6.encode(t1 + t0 + e22 + t0), a22 = et(t102, s2);
  if (x(a22)) throw Error("Missing parts end");
  let o22 = t6.encode(t1 + t0 + e22), l22 = t102.subarray(i2, a22), u2 = t7(l22, o22);
  return u2.map((t11) => {
    let e32 = t6.encode(t1 + t1), r3 = t9(t11, e32);
    if (x(r3)) throw Error("Missing headers end");
    let n3 = t6.encode(t1), i3 = t11.subarray(0, r3), s3 = t7(i3, n3), a3 = new Headers();
    for (let t12 of s3) {
      let e4 = t3.decode(t12), [r4, n4] = e4.split(": ", 2);
      r4 && n4 && a3.append(r4, n4);
    }
    let o3 = r3 + e32.length, l3 = t11.slice(o3);
    return { headers: a3, body: l3 };
  });
}
function t4(t102) {
  let e22 = RegExp("^(?<unit>\\w+) (?<start>\\d+)-(?<end>\\d+)\\/(?<size>\\d+|\\*)$", "u").exec(t102);
  if (!e22 || !e22.groups) throw Error("Invalid Content-Range header");
  let { unit: r2, start: n22, end: i2, size: s2 } = e22.groups;
  return { unit: r2, start: Number(n22), end: Number(i2), size: "*" !== s2 ? Number(s2) : null };
}
var t8 = class {
  read(t102, e22) {
    for (let r2 of this.chunks) {
      if (t102 < r2.start) break;
      if (t102 > r2.end) continue;
      if (t102 + e22 > r2.end) break;
      let n22 = t102 - r2.start, i2 = n22 + e22;
      return r2.data.slice(n22, i2);
    }
    throw Error("Missing data");
  }
  write(t102, e22) {
    let r2 = t102, n22 = r2 + e22.length, i2 = 0, s2 = this.chunks.length;
    for (; i2 < s2; i2++) {
      let t11 = this.chunks[i2];
      if (b(t11, "Missing chunk"), !(r2 > t11.end)) {
        if (r2 > t11.start) {
          let n3 = r2 - t11.start, i3 = t11.data.subarray(0, n3);
          e22 = er(i3, e22), r2 = t11.start;
        }
        break;
      }
    }
    for (; s2 > i2; s2--) {
      let t11 = this.chunks[s2 - 1];
      if (b(t11, "Missing chunk"), !(n22 < t11.start)) {
        if (n22 < t11.end) {
          let r3 = n22 - t11.start, i3 = t11.data.subarray(r3);
          e22 = er(e22, i3), n22 = t11.end;
        }
        break;
      }
    }
    let a22 = { start: r2, end: n22, data: e22 }, o22 = s2 - i2;
    this.chunks.splice(i2, o22, a22);
  }
  constructor() {
    this.chunks = [];
  }
};
function t7(t102, e22) {
  var r2;
  let n22 = [];
  for (; t102.length > 0; ) {
    let i2 = null != (r2 = t9(t102, e22)) ? r2 : t102.length, s2 = t102.subarray(0, i2);
    n22.push(s2), t102 = t102.subarray(i2 + e22.length);
  }
  return n22;
}
function t9(t102, e22) {
  for (let r2 = 0; r2 < t102.length - e22.length; r2++) {
    let n22 = t102.subarray(r2);
    if (ee(n22, e22)) return r2;
  }
}
function et(t102, e22) {
  for (let r2 = t102.length - e22.length; r2 >= 0; r2--) {
    let n22 = t102.subarray(r2);
    if (ee(n22, e22)) return r2;
  }
}
function ee(t102, e22) {
  for (let r2 = 0; r2 < e22.length; r2++) if (t102[r2] !== e22[r2]) return false;
  return true;
}
function er(t102, e22) {
  let r2 = t102.length + e22.length, n22 = new Uint8Array(r2);
  return n22.set(t102, 0), n22.set(e22, t102.length), n22;
}
function en(t102) {
  b(t102.length > 0, "Must have at least one range");
  let e22 = [...t102].sort((t11, e32) => t11.from - e32.from), r2 = [];
  for (let t11 of e22) {
    let e32 = r2.length - 1, n3 = r2[e32];
    n3 && t11.from <= n3.to ? r2[e32] = { from: n3.from, to: Math.max(n3.to, t11.to) } : r2.push(t11);
  }
  let n22 = r2.map((t11) => `${t11.from}-${t11.to - 1}`);
  return `bytes=${n22.join(",")}`;
}
async function ei(t102, e22, r2) {
  if (!r2) return t2(t102, e22);
  let n22 = eo(e22), i2 = [], s2 = 0;
  for (let t11 of n22) i2.push(`${t11.from}-${t11.to - 1}`), s2 += t11.to - t11.from;
  let a22 = new URL(t102), o22 = i2.join(",");
  a22.searchParams.set("range", o22);
  let l22 = await tX(a22);
  if (200 !== l22.status) throw Error(`Request failed: ${l22.status} ${l22.statusText}`);
  let u2 = await l22.arrayBuffer(), f2 = new Uint8Array(u2);
  if (f2.length !== s2) throw Error("Request failed: Unexpected response length");
  let h2 = new es(), c2 = 0;
  for (let t11 of n22) {
    let e32 = t11.to - t11.from, r3 = c2 + e32, n3 = f2.subarray(c2, r3);
    h2.write(t11.from, n3), c2 = r3;
  }
  return e22.map((t11) => h2.read(t11.from, t11.to - t11.from));
}
var es = class {
  read(t102, e22) {
    for (let r2 of this.chunks) {
      if (t102 < r2.start) break;
      if (t102 > r2.end) continue;
      if (t102 + e22 > r2.end) break;
      let n22 = t102 - r2.start, i2 = n22 + e22;
      return r2.data.slice(n22, i2);
    }
    throw Error("Missing data");
  }
  write(t102, e22) {
    let r2 = t102, n22 = r2 + e22.length, i2 = 0, s2 = this.chunks.length;
    for (; i2 < s2; i2++) {
      let t11 = this.chunks[i2];
      if (b(t11, "Missing chunk"), !(r2 > t11.end)) {
        if (r2 > t11.start) {
          let n3 = r2 - t11.start, i3 = t11.data.subarray(0, n3);
          e22 = ea(i3, e22), r2 = t11.start;
        }
        break;
      }
    }
    for (; s2 > i2; s2--) {
      let t11 = this.chunks[s2 - 1];
      if (b(t11, "Missing chunk"), !(n22 < t11.start)) {
        if (n22 < t11.end) {
          let r3 = n22 - t11.start, i3 = t11.data.subarray(r3);
          e22 = ea(e22, i3), n22 = t11.end;
        }
        break;
      }
    }
    let a22 = { start: r2, end: n22, data: e22 }, o22 = s2 - i2;
    this.chunks.splice(i2, o22, a22);
  }
  constructor() {
    this.chunks = [];
  }
};
function ea(t102, e22) {
  let r2 = t102.length + e22.length, n22 = new Uint8Array(r2);
  return n22.set(t102, 0), n22.set(e22, t102.length), n22;
}
function eo(t102) {
  b(t102.length > 0, "Must have at least one range");
  let e22 = [...t102].sort((t11, e32) => t11.from - e32.from), r2 = [];
  for (let t11 of e22) {
    let e32 = r2.length - 1, n22 = r2[e32];
    n22 && t11.from <= n22.to ? r2[e32] = { from: n22.from, to: Math.max(n22.to, t11.to) } : r2.push(t11);
  }
  return r2;
}
var eu = class {
  static read(t102, e22) {
    let n22 = new eu();
    if (e22) {
      let r2 = t102.readUint32(), n3 = t102.readBuffer(r2), i3 = ty(new Uint8Array(n3), { dictionary: e22 });
      t102 = new I(i3.buffer);
    }
    let i2 = t102.readUint16();
    for (let e32 = 0; e32 < i2; e32++) {
      let e4 = t102.readString(), i3 = r.read(t102);
      n22.setField(e4, i3);
    }
    return n22;
  }
  writeUncompressed(t102) {
    for (let [e22, n22] of (t102.writeUint16(this.fields.size), this.fields)) t102.writeString(e22), r.write(t102, n22);
  }
  write(t102, e22) {
    if (e22) {
      let r2 = new tT();
      this.writeUncompressed(r2);
      let n22 = tv(r2.subarray(), { dictionary: e22 });
      t102.writeUint32(n22.byteLength), t102.writeBuffer(n22);
    } else this.writeUncompressed(t102);
  }
  getData() {
    let t102 = {};
    for (let [e22, r2] of this.fields) t102[e22] = r2;
    return t102;
  }
  setField(t102, e22) {
    this.fields.set(t102, e22);
  }
  getField(t102) {
    return this.fields.get(t102);
  }
  constructor() {
    this.fields = /* @__PURE__ */ new Map();
  }
};
var ef = class {
  scanItems() {
    return null != this.itemsPromise || (this.itemsPromise = Promise.all([tX(this.url), this.getCompressionDictionary()]).then(async ([t102, e22]) => {
      if (!t102.ok) throw Error(`Request failed: ${t102.status} ${t102.statusText}`);
      let r2 = await t102.arrayBuffer(), n22 = new I(r2), i2 = [], s2 = n22.readUint32();
      for (let t11 = 0; t11 < s2; t11++) {
        let t12 = n22.getOffset(), r3 = eu.read(n22, e22), s3 = n22.getOffset() - t12, a22 = new tM(this.id, t12, s3), o22 = a22.toString(), l22 = { pointer: o22, data: r3.getData() };
        this.itemLoader.prime(o22, l22), i2.push(l22);
      }
      return i2;
    })), this.itemsPromise;
  }
  resolveItem(t102) {
    return this.itemLoader.load(t102);
  }
  getCompressionDictionary() {
    if (!this.compressionDictionaryUrl) return null;
    let t102 = this.compressionDictionaryCache.get(this.compressionDictionaryUrl);
    if (t102) return t102;
    let e22 = tX(this.compressionDictionaryUrl).then(async (t11) => {
      if (!t11.ok) throw Error(`Compression dictionary request failed: ${t11.status} ${t11.statusText}`);
      let e32 = await t11.arrayBuffer();
      return new Uint8Array(e32);
    });
    return this.compressionDictionaryCache.set(this.compressionDictionaryUrl, e22), e22;
  }
  constructor(t102, e22, r2, n22) {
    this.id = t102, this.url = e22, this.compressionDictionaryUrl = r2, this.compressionDictionaryCache = n22, this.itemLoader = new w.default(async (t11) => {
      let e32 = t11.map((t12) => {
        let e4 = tM.fromString(t12);
        return { from: e4.offset, to: e4.offset + e4.length };
      }), [r3, n3] = await Promise.all([ei(this.url, e32, !this.compressionDictionaryUrl), this.getCompressionDictionary()]);
      return r3.map((e4, r4) => {
        let i2 = new I(e4.buffer), s2 = eu.read(i2, n3), a22 = t11[r4];
        return b(a22, "Missing pointer"), { pointer: a22, data: s2.getData() };
      });
    });
  }
};
var eh = class {
  async scanItems() {
    let t102 = await Promise.all(this.chunks.map(async (t11) => t11.scanItems()));
    return t102.flat();
  }
  async resolveItems(t102) {
    return Promise.all(t102.map((t11) => {
      let e22 = tM.fromString(t11), r2 = this.chunks[e22.chunkId];
      return b(r2, "Missing chunk"), r2.resolveItem(t11);
    }));
  }
  compareItems(t102, e22) {
    let r2 = tM.fromString(t102.pointer), n22 = tM.fromString(e22.pointer);
    return r2.compare(n22);
  }
  compareValues(t102, e22, n22) {
    return r.compare(t102, e22, n22);
  }
  constructor(t102) {
    this.options = t102, this.schema = this.options.schema, this.indexes = this.options.indexes, this.resolveRichText = this.options.resolveRichText;
    let e22 = /* @__PURE__ */ new Map();
    this.chunks = this.options.chunks.map((t11, r2) => new ef(r2, t11, this.options.compressionDictionary, e22));
  }
};

// /:https://framerusercontent.com/modules/QhJKpqGqPxDmVMgIRLLU/G6g93OStw38s1pMQLa8V/gFwBjMfM0-1.js
var e2 = [];
async function resolveRichText(t11) {
  let i2 = e2[t11];
  if (i2) return await i2();
}

// /:https://framerusercontent.com/modules/QhJKpqGqPxDmVMgIRLLU/G6g93OStw38s1pMQLa8V/gFwBjMfM0.js
var a2 = { id: { isNullable: false, type: t10.String }, nextItemId: { isNullable: true, type: t10.String }, NkZkE4Nmw: { isNullable: true, type: t10.String }, previousItemId: { isNullable: true, type: t10.String }, QWI1IISoN: { isNullable: true, type: t10.String } };
var o2 = new l2();
var n2 = { collectionByLocaleId: { default: new eh({ chunks: [new URL("./gFwBjMfM0-chunk-default-0.framercms", "https://framerusercontent.com/modules/QhJKpqGqPxDmVMgIRLLU/G6g93OStw38s1pMQLa8V/gFwBjMfM0.js").href], compressionDictionary: new URL("./gFwBjMfM0-chunk-default-dict.framercms", "https://framerusercontent.com/modules/QhJKpqGqPxDmVMgIRLLU/G6g93OStw38s1pMQLa8V/gFwBjMfM0.js").href, indexes: [], resolveRichText, schema: a2 }) }, displayName: "Categories" };
var stdin_default = n2;
e3(n2, { QWI1IISoN: { defaultValue: "", title: "Title", type: t10.String }, NkZkE4Nmw: { title: "Slug", type: t10.String }, previousItemId: { dataIdentifier: "local-module:collection/gFwBjMfM0:default", title: "Previous", type: t10.CollectionReference }, nextItemId: { dataIdentifier: "local-module:collection/gFwBjMfM0:default", title: "Next", type: t10.CollectionReference } });

export {
  stdin_default
};
/*! Bundled license information:

splaytree/dist/splay.js:
  (**
   * splaytree v3.1.2
   * Fast Splay tree for Node and browser
   *
   * @author Alexander Milevski <info@w8r.name>
   * @license MIT
   * @preserve
   *)
  (*! *****************************************************************************
      Copyright (c) Microsoft Corporation. All rights reserved.
      Licensed under the Apache License, Version 2.0 (the "License"); you may not use
      this file except in compliance with the License. You may obtain a copy of the
      License at http://www.apache.org/licenses/LICENSE-2.0
  
      THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
      KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
      WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
      MERCHANTABLITY OR NON-INFRINGEMENT.
  
      See the Apache Version 2.0 License for specific language governing permissions
      and limitations under the License.
      ***************************************************************************** *)
*/
